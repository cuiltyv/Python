
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA COMMENT CONST_FLOAT CONST_INT CONST_STRING DO ELSE END EQUALS FLOAT GREATER GREATER_EQUAL IDENTIFIER IF INT LBRACKET LESS LESS_EQUAL LPAREN LSQBRACKET MAIN NOT_EQUAL OP_ASIGNA OP_DIV OP_MULT OP_SUB OP_SUM PRINT PROGRAM RBRACKET RPAREN RSQBRACKET SEMICOL STRING VAR VOID WHILEprogram : PROGRAM IDENTIFIER SEMICOL VARS_OPT FUNCS_OPT MAIN Body ENDVARS_OPT : VARS\n                | emptyFUNCS_OPT : FUNCS FUNCS_OPT\n                 | emptyVARS : VAR VARS_INITVARS_INIT : IDENTIFIER MORE_IDS COLON TYPE SEMICOL\n                 | IDENTIFIER MORE_IDS COLON TYPE SEMICOL VARS_INITMORE_IDS : COMMA IDENTIFIER MORE_IDS\n                | emptyFUNCS : VOID IDENTIFIER LPAREN ARGS RPAREN LSQBRACKET VARS_OPT Body RSQBRACKET SEMICOLMORE_ARGS : COMMA IDENTIFIER COLON TYPE MORE_ARGS\n                 | emptyARGS : IDENTIFIER COLON TYPE MORE_ARGS\n            | emptyBody : LBRACKET STATEMENT_OPT RBRACKETSTATEMENT_OPT : STATEMENT STATEMENT_OPT\n                     | emptySTATEMENT : ASSIGN\n                    | CONDITION\n                    | CYCLE\n                    | F_CALL\n                    | PRINTPASSIGN : IDENTIFIER OP_ASIGNA EXPRESION SEMICOLCONDITION : IF LPAREN EXPRESION RPAREN Body ELSE_ARG SEMICOLELSE_ARG : ELSE Body\n                | emptyCYCLE : DO Body WHILE LPAREN EXPRESION RPAREN SEMICOLPRINTP : PRINT LPAREN CONST_STRING MORE_PRINT_ARGS RPAREN SEMICOL\n            | PRINT LPAREN EXPRESION MORE_PRINT_ARGS RPAREN SEMICOLMORE_PRINT_ARGS : COMMA CONST_STRING MORE_PRINT_ARGS\n                        | COMMA EXPRESION MORE_PRINT_ARGS\n                       | emptyTYPE : INT\n            | FLOATEXPRESION : EXP EXPRESION_OPTEXPRESION_OPT : LESS EXP\n                     | GREATER EXP\n                     | NOT_EQUAL EXP\n                     | EQUALS EXP\n                     | LESS_EQUAL EXP\n                     | GREATER_EQUAL EXP\n                     | emptyEXP : TERMINO EXP_OPTEXP_OPT : OP_SUM TERMINO EXP_OPT\n               | OP_SUB TERMINO EXP_OPT\n               | emptyTERMINO : FACTOR TERMINO_OPTTERMINO_OPT : OP_MULT FACTOR TERMINO_OPT\n                   | OP_DIV FACTOR TERMINO_OPT\n                   | emptyFACTOR : LPAREN EXPRESION RPAREN\n              | SIGN IDENTIFIER \n              | SIGN CTESIGN : OP_SUM\n            | OP_SUB\n            | emptyF_CALL : IDENTIFIER LPAREN OPT_EXPRESION RPAREN SEMICOLOPT_EXPRESION : EXPRESION MORE_EXPRESION\n                     | emptyMORE_EXPRESION : COMMA EXPRESION MORE_EXPRESION\n                      | emptyCTE : CONST_INT\n           | CONST_FLOATempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,26,],[0,-1,]),'IDENTIFIER':([2,8,12,19,22,23,28,30,31,32,33,34,48,49,50,52,55,60,61,62,63,64,67,75,77,78,79,80,81,82,85,86,89,90,99,102,104,108,122,141,144,147,149,],[3,14,17,25,35,39,35,-19,-20,-21,-22,-23,-65,-65,-65,-65,14,-65,93,-55,-56,-57,-57,-24,-65,-65,-65,-65,-65,-65,-65,-65,-65,-65,-65,-65,-65,130,-58,-29,-30,-25,-28,]),'SEMICOL':([3,42,43,44,46,56,57,58,59,76,83,84,87,88,91,93,94,95,96,97,111,112,113,114,115,116,117,118,119,120,121,124,126,129,132,133,134,135,137,139,140,146,148,],[4,55,-34,-35,-16,75,-65,-65,-65,-36,-43,-44,-47,-48,-51,-53,-54,-63,-64,122,-37,-38,-39,-40,-41,-42,-65,-65,-65,-65,-52,-65,141,144,-45,-46,-49,-50,147,-27,149,151,-26,]),'VAR':([4,73,],[8,8,]),'VOID':([4,5,6,7,10,13,55,74,151,],[-65,12,-2,-3,12,-6,-7,-8,-11,]),'MAIN':([4,5,6,7,9,10,11,13,16,55,74,151,],[-65,-65,-2,-3,15,-65,-5,-6,-4,-7,-8,-11,]),'LBRACKET':([6,7,13,15,37,55,73,74,101,110,138,],[-2,-3,-6,22,22,-7,-65,-8,22,22,22,]),'COMMA':([14,25,43,44,57,58,59,66,70,71,72,76,83,84,87,88,91,93,94,95,96,111,112,113,114,115,116,117,118,119,120,121,123,127,128,132,133,134,135,150,],[19,19,-34,-35,-65,-65,-65,99,104,104,108,-36,-43,-44,-47,-48,-51,-53,-54,-63,-64,-37,-38,-39,-40,-41,-42,-65,-65,-65,-65,-52,99,104,104,-45,-46,-49,-50,108,]),'COLON':([14,18,20,25,39,45,130,],[-65,24,-10,-65,53,-9,145,]),'LPAREN':([17,35,36,38,48,49,50,52,60,69,77,78,79,80,81,82,85,86,89,90,99,102,104,],[23,49,50,52,60,60,60,60,60,102,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'END':([21,46,],[26,-16,]),'RBRACKET':([22,27,28,29,30,31,32,33,34,47,75,122,141,144,147,149,],[-65,46,-65,-18,-19,-20,-21,-22,-23,-17,-24,-58,-29,-30,-25,-28,]),'IF':([22,28,30,31,32,33,34,75,122,141,144,147,149,],[36,36,-19,-20,-21,-22,-23,-24,-58,-29,-30,-25,-28,]),'DO':([22,28,30,31,32,33,34,75,122,141,144,147,149,],[37,37,-19,-20,-21,-22,-23,-24,-58,-29,-30,-25,-28,]),'PRINT':([22,28,30,31,32,33,34,75,122,141,144,147,149,],[38,38,-19,-20,-21,-22,-23,-24,-58,-29,-30,-25,-28,]),'RPAREN':([23,40,41,43,44,49,57,58,59,65,66,67,68,70,71,72,76,83,84,87,88,91,92,93,94,95,96,98,100,103,105,106,107,109,111,112,113,114,115,116,117,118,119,120,121,123,125,127,128,132,133,134,135,136,142,143,150,152,],[-65,54,-15,-34,-35,-65,-65,-65,-65,97,-65,-60,101,-65,-65,-65,-36,-43,-44,-47,-48,-51,121,-53,-54,-63,-64,-59,-62,126,-33,129,-14,-13,-37,-38,-39,-40,-41,-42,-65,-65,-65,-65,-52,-65,140,-65,-65,-45,-46,-49,-50,-61,-31,-32,-65,-12,]),'INT':([24,53,145,],[43,43,43,]),'FLOAT':([24,53,145,],[44,44,44,]),'OP_ASIGNA':([35,],[48,]),'WHILE':([46,51,],[-16,69,]),'ELSE':([46,124,],[-16,138,]),'RSQBRACKET':([46,131,],[-16,146,]),'OP_SUM':([48,49,50,52,58,59,60,77,78,79,80,81,82,85,86,88,89,90,91,93,94,95,96,99,102,104,117,118,119,120,121,134,135,],[62,62,62,62,85,-65,62,62,62,62,62,62,62,62,62,-48,62,62,-51,-53,-54,-63,-64,62,62,62,85,85,-65,-65,-52,-49,-50,]),'OP_SUB':([48,49,50,52,58,59,60,77,78,79,80,81,82,85,86,88,89,90,91,93,94,95,96,99,102,104,117,118,119,120,121,134,135,],[63,63,63,63,86,-65,63,63,63,63,63,63,63,63,63,-48,63,63,-51,-53,-54,-63,-64,63,63,63,86,86,-65,-65,-52,-49,-50,]),'CONST_INT':([48,49,50,52,60,61,62,63,64,67,77,78,79,80,81,82,85,86,89,90,99,102,104,],[-65,-65,-65,-65,-65,95,-55,-56,-57,-57,-65,-65,-65,-65,-65,-65,-65,-65,-65,-65,-65,-65,-65,]),'CONST_FLOAT':([48,49,50,52,60,61,62,63,64,67,77,78,79,80,81,82,85,86,89,90,99,102,104,],[-65,-65,-65,-65,-65,96,-55,-56,-57,-57,-65,-65,-65,-65,-65,-65,-65,-65,-65,-65,-65,-65,-65,]),'CONST_STRING':([52,104,],[70,127,]),'LSQBRACKET':([54,],[73,]),'LESS':([57,58,59,84,87,88,91,93,94,95,96,117,118,119,120,121,132,133,134,135,],[77,-65,-65,-44,-47,-48,-51,-53,-54,-63,-64,-65,-65,-65,-65,-52,-45,-46,-49,-50,]),'GREATER':([57,58,59,84,87,88,91,93,94,95,96,117,118,119,120,121,132,133,134,135,],[78,-65,-65,-44,-47,-48,-51,-53,-54,-63,-64,-65,-65,-65,-65,-52,-45,-46,-49,-50,]),'NOT_EQUAL':([57,58,59,84,87,88,91,93,94,95,96,117,118,119,120,121,132,133,134,135,],[79,-65,-65,-44,-47,-48,-51,-53,-54,-63,-64,-65,-65,-65,-65,-52,-45,-46,-49,-50,]),'EQUALS':([57,58,59,84,87,88,91,93,94,95,96,117,118,119,120,121,132,133,134,135,],[80,-65,-65,-44,-47,-48,-51,-53,-54,-63,-64,-65,-65,-65,-65,-52,-45,-46,-49,-50,]),'LESS_EQUAL':([57,58,59,84,87,88,91,93,94,95,96,117,118,119,120,121,132,133,134,135,],[81,-65,-65,-44,-47,-48,-51,-53,-54,-63,-64,-65,-65,-65,-65,-52,-45,-46,-49,-50,]),'GREATER_EQUAL':([57,58,59,84,87,88,91,93,94,95,96,117,118,119,120,121,132,133,134,135,],[82,-65,-65,-44,-47,-48,-51,-53,-54,-63,-64,-65,-65,-65,-65,-52,-45,-46,-49,-50,]),'OP_MULT':([59,93,94,95,96,119,120,121,],[89,-53,-54,-63,-64,89,89,-52,]),'OP_DIV':([59,93,94,95,96,119,120,121,],[90,-53,-54,-63,-64,90,90,-52,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'VARS_OPT':([4,73,],[5,110,]),'VARS':([4,73,],[6,6,]),'empty':([4,5,10,14,22,23,25,28,48,49,50,52,57,58,59,60,66,70,71,72,73,77,78,79,80,81,82,85,86,89,90,99,102,104,117,118,119,120,123,124,127,128,150,],[7,11,11,20,29,41,20,29,64,67,64,64,83,87,91,64,100,105,105,109,7,64,64,64,64,64,64,64,64,64,64,64,64,64,87,87,91,91,100,139,105,105,109,]),'FUNCS_OPT':([5,10,],[9,16,]),'FUNCS':([5,10,],[10,10,]),'VARS_INIT':([8,55,],[13,74,]),'MORE_IDS':([14,25,],[18,45,]),'Body':([15,37,101,110,138,],[21,51,124,131,148,]),'STATEMENT_OPT':([22,28,],[27,47,]),'STATEMENT':([22,28,],[28,28,]),'ASSIGN':([22,28,],[30,30,]),'CONDITION':([22,28,],[31,31,]),'CYCLE':([22,28,],[32,32,]),'F_CALL':([22,28,],[33,33,]),'PRINTP':([22,28,],[34,34,]),'ARGS':([23,],[40,]),'TYPE':([24,53,145,],[42,72,150,]),'EXPRESION':([48,49,50,52,60,99,102,104,],[56,66,68,71,92,123,125,128,]),'EXP':([48,49,50,52,60,77,78,79,80,81,82,99,102,104,],[57,57,57,57,57,111,112,113,114,115,116,57,57,57,]),'TERMINO':([48,49,50,52,60,77,78,79,80,81,82,85,86,99,102,104,],[58,58,58,58,58,58,58,58,58,58,58,117,118,58,58,58,]),'FACTOR':([48,49,50,52,60,77,78,79,80,81,82,85,86,89,90,99,102,104,],[59,59,59,59,59,59,59,59,59,59,59,59,59,119,120,59,59,59,]),'SIGN':([48,49,50,52,60,77,78,79,80,81,82,85,86,89,90,99,102,104,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'OPT_EXPRESION':([49,],[65,]),'EXPRESION_OPT':([57,],[76,]),'EXP_OPT':([58,117,118,],[84,132,133,]),'TERMINO_OPT':([59,119,120,],[88,134,135,]),'CTE':([61,],[94,]),'MORE_EXPRESION':([66,123,],[98,136,]),'MORE_PRINT_ARGS':([70,71,127,128,],[103,106,142,143,]),'MORE_ARGS':([72,150,],[107,152,]),'ELSE_ARG':([124,],[137,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER SEMICOL VARS_OPT FUNCS_OPT MAIN Body END','program',8,'p_program','parser_2.py',112),
  ('VARS_OPT -> VARS','VARS_OPT',1,'p_VARS_OPT','parser_2.py',117),
  ('VARS_OPT -> empty','VARS_OPT',1,'p_VARS_OPT','parser_2.py',118),
  ('FUNCS_OPT -> FUNCS FUNCS_OPT','FUNCS_OPT',2,'p_FUNCS_OPT','parser_2.py',123),
  ('FUNCS_OPT -> empty','FUNCS_OPT',1,'p_FUNCS_OPT','parser_2.py',124),
  ('VARS -> VAR VARS_INIT','VARS',2,'p_VARS','parser_2.py',129),
  ('VARS_INIT -> IDENTIFIER MORE_IDS COLON TYPE SEMICOL','VARS_INIT',5,'p_VARS_INIT','parser_2.py',134),
  ('VARS_INIT -> IDENTIFIER MORE_IDS COLON TYPE SEMICOL VARS_INIT','VARS_INIT',6,'p_VARS_INIT','parser_2.py',135),
  ('MORE_IDS -> COMMA IDENTIFIER MORE_IDS','MORE_IDS',3,'p_MORE_IDS','parser_2.py',140),
  ('MORE_IDS -> empty','MORE_IDS',1,'p_MORE_IDS','parser_2.py',141),
  ('FUNCS -> VOID IDENTIFIER LPAREN ARGS RPAREN LSQBRACKET VARS_OPT Body RSQBRACKET SEMICOL','FUNCS',10,'p_FUNCS','parser_2.py',146),
  ('MORE_ARGS -> COMMA IDENTIFIER COLON TYPE MORE_ARGS','MORE_ARGS',5,'p_MORE_ARGS','parser_2.py',151),
  ('MORE_ARGS -> empty','MORE_ARGS',1,'p_MORE_ARGS','parser_2.py',152),
  ('ARGS -> IDENTIFIER COLON TYPE MORE_ARGS','ARGS',4,'p_ARGS','parser_2.py',157),
  ('ARGS -> empty','ARGS',1,'p_ARGS','parser_2.py',158),
  ('Body -> LBRACKET STATEMENT_OPT RBRACKET','Body',3,'p_Body','parser_2.py',163),
  ('STATEMENT_OPT -> STATEMENT STATEMENT_OPT','STATEMENT_OPT',2,'p_STATEMENT_OPT','parser_2.py',168),
  ('STATEMENT_OPT -> empty','STATEMENT_OPT',1,'p_STATEMENT_OPT','parser_2.py',169),
  ('STATEMENT -> ASSIGN','STATEMENT',1,'p_STATEMENT','parser_2.py',179),
  ('STATEMENT -> CONDITION','STATEMENT',1,'p_STATEMENT','parser_2.py',180),
  ('STATEMENT -> CYCLE','STATEMENT',1,'p_STATEMENT','parser_2.py',181),
  ('STATEMENT -> F_CALL','STATEMENT',1,'p_STATEMENT','parser_2.py',182),
  ('STATEMENT -> PRINTP','STATEMENT',1,'p_STATEMENT','parser_2.py',183),
  ('ASSIGN -> IDENTIFIER OP_ASIGNA EXPRESION SEMICOL','ASSIGN',4,'p_ASSIGN','parser_2.py',188),
  ('CONDITION -> IF LPAREN EXPRESION RPAREN Body ELSE_ARG SEMICOL','CONDITION',7,'p_CONDITION','parser_2.py',193),
  ('ELSE_ARG -> ELSE Body','ELSE_ARG',2,'p_ELSE_ARG','parser_2.py',198),
  ('ELSE_ARG -> empty','ELSE_ARG',1,'p_ELSE_ARG','parser_2.py',199),
  ('CYCLE -> DO Body WHILE LPAREN EXPRESION RPAREN SEMICOL','CYCLE',7,'p_CYCLE','parser_2.py',204),
  ('PRINTP -> PRINT LPAREN CONST_STRING MORE_PRINT_ARGS RPAREN SEMICOL','PRINTP',6,'p_PRINTP','parser_2.py',209),
  ('PRINTP -> PRINT LPAREN EXPRESION MORE_PRINT_ARGS RPAREN SEMICOL','PRINTP',6,'p_PRINTP','parser_2.py',210),
  ('MORE_PRINT_ARGS -> COMMA CONST_STRING MORE_PRINT_ARGS','MORE_PRINT_ARGS',3,'p_MORE_PRINT_ARGS','parser_2.py',215),
  ('MORE_PRINT_ARGS -> COMMA EXPRESION MORE_PRINT_ARGS','MORE_PRINT_ARGS',3,'p_MORE_PRINT_ARGS','parser_2.py',216),
  ('MORE_PRINT_ARGS -> empty','MORE_PRINT_ARGS',1,'p_MORE_PRINT_ARGS','parser_2.py',217),
  ('TYPE -> INT','TYPE',1,'p_TYPE','parser_2.py',223),
  ('TYPE -> FLOAT','TYPE',1,'p_TYPE','parser_2.py',224),
  ('EXPRESION -> EXP EXPRESION_OPT','EXPRESION',2,'p_EXPRESION','parser_2.py',229),
  ('EXPRESION_OPT -> LESS EXP','EXPRESION_OPT',2,'p_EXPRESION_OPT','parser_2.py',234),
  ('EXPRESION_OPT -> GREATER EXP','EXPRESION_OPT',2,'p_EXPRESION_OPT','parser_2.py',235),
  ('EXPRESION_OPT -> NOT_EQUAL EXP','EXPRESION_OPT',2,'p_EXPRESION_OPT','parser_2.py',236),
  ('EXPRESION_OPT -> EQUALS EXP','EXPRESION_OPT',2,'p_EXPRESION_OPT','parser_2.py',237),
  ('EXPRESION_OPT -> LESS_EQUAL EXP','EXPRESION_OPT',2,'p_EXPRESION_OPT','parser_2.py',238),
  ('EXPRESION_OPT -> GREATER_EQUAL EXP','EXPRESION_OPT',2,'p_EXPRESION_OPT','parser_2.py',239),
  ('EXPRESION_OPT -> empty','EXPRESION_OPT',1,'p_EXPRESION_OPT','parser_2.py',240),
  ('EXP -> TERMINO EXP_OPT','EXP',2,'p_EXP','parser_2.py',245),
  ('EXP_OPT -> OP_SUM TERMINO EXP_OPT','EXP_OPT',3,'p_EXP_OPT','parser_2.py',250),
  ('EXP_OPT -> OP_SUB TERMINO EXP_OPT','EXP_OPT',3,'p_EXP_OPT','parser_2.py',251),
  ('EXP_OPT -> empty','EXP_OPT',1,'p_EXP_OPT','parser_2.py',252),
  ('TERMINO -> FACTOR TERMINO_OPT','TERMINO',2,'p_TERMINO','parser_2.py',257),
  ('TERMINO_OPT -> OP_MULT FACTOR TERMINO_OPT','TERMINO_OPT',3,'p_TERMINO_OPT','parser_2.py',262),
  ('TERMINO_OPT -> OP_DIV FACTOR TERMINO_OPT','TERMINO_OPT',3,'p_TERMINO_OPT','parser_2.py',263),
  ('TERMINO_OPT -> empty','TERMINO_OPT',1,'p_TERMINO_OPT','parser_2.py',264),
  ('FACTOR -> LPAREN EXPRESION RPAREN','FACTOR',3,'p_FACTOR','parser_2.py',269),
  ('FACTOR -> SIGN IDENTIFIER','FACTOR',2,'p_FACTOR','parser_2.py',270),
  ('FACTOR -> SIGN CTE','FACTOR',2,'p_FACTOR','parser_2.py',271),
  ('SIGN -> OP_SUM','SIGN',1,'p_SIGN','parser_2.py',276),
  ('SIGN -> OP_SUB','SIGN',1,'p_SIGN','parser_2.py',277),
  ('SIGN -> empty','SIGN',1,'p_SIGN','parser_2.py',278),
  ('F_CALL -> IDENTIFIER LPAREN OPT_EXPRESION RPAREN SEMICOL','F_CALL',5,'p_F_CALL','parser_2.py',283),
  ('OPT_EXPRESION -> EXPRESION MORE_EXPRESION','OPT_EXPRESION',2,'p_OPT_EXPRESION','parser_2.py',288),
  ('OPT_EXPRESION -> empty','OPT_EXPRESION',1,'p_OPT_EXPRESION','parser_2.py',289),
  ('MORE_EXPRESION -> COMMA EXPRESION MORE_EXPRESION','MORE_EXPRESION',3,'p_MORE_EXPRESION','parser_2.py',295),
  ('MORE_EXPRESION -> empty','MORE_EXPRESION',1,'p_MORE_EXPRESION','parser_2.py',296),
  ('CTE -> CONST_INT','CTE',1,'p_CTE','parser_2.py',301),
  ('CTE -> CONST_FLOAT','CTE',1,'p_CTE','parser_2.py',302),
  ('empty -> <empty>','empty',0,'p_empty','parser_2.py',306),
]
