Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM IDENTIFIER SEMICOL VARS_OPT FUNCS_OPT MAIN Body END
Rule 2     VARS_OPT -> VARS
Rule 3     VARS_OPT -> empty
Rule 4     FUNCS_OPT -> FUNCS FUNCS_OPT
Rule 5     FUNCS_OPT -> empty
Rule 6     VARS -> VAR VARS_INIT
Rule 7     VARS_INIT -> IDENTIFIER MORE_IDS COLON TYPE SEMICOL
Rule 8     VARS_INIT -> IDENTIFIER MORE_IDS COLON TYPE SEMICOL VARS_INIT
Rule 9     MORE_IDS -> COMMA IDENTIFIER MORE_IDS
Rule 10    MORE_IDS -> empty
Rule 11    FUNCS -> VOID IDENTIFIER LPAREN ARGS RPAREN LSQBRACKET VARS_OPT Body RSQBRACKET SEMICOL
Rule 12    MORE_ARGS -> COMMA IDENTIFIER COLON TYPE MORE_ARGS
Rule 13    MORE_ARGS -> empty
Rule 14    ARGS -> IDENTIFIER COLON TYPE MORE_ARGS
Rule 15    ARGS -> empty
Rule 16    Body -> LBRACKET STATEMENT_OPT RBRACKET
Rule 17    STATEMENT_OPT -> STATEMENT STATEMENT_OPT
Rule 18    STATEMENT_OPT -> empty
Rule 19    STATEMENT -> ASSIGN
Rule 20    STATEMENT -> CONDITION
Rule 21    STATEMENT -> CYCLE
Rule 22    STATEMENT -> F_CALL
Rule 23    STATEMENT -> PRINTP
Rule 24    ASSIGN -> IDENTIFIER OP_ASIGNA EXPRESION SEMICOL
Rule 25    CONDITION -> IF LPAREN EXPRESION RPAREN Body ELSE_ARG SEMICOL
Rule 26    ELSE_ARG -> ELSE Body
Rule 27    ELSE_ARG -> empty
Rule 28    CYCLE -> DO Body WHILE LPAREN EXPRESION RPAREN SEMICOL
Rule 29    PRINTP -> PRINT LPAREN CONST_STRING MORE_PRINT_ARGS RPAREN SEMICOL
Rule 30    PRINTP -> PRINT LPAREN EXPRESION MORE_PRINT_ARGS RPAREN SEMICOL
Rule 31    MORE_PRINT_ARGS -> COMMA CONST_STRING MORE_PRINT_ARGS
Rule 32    MORE_PRINT_ARGS -> COMMA EXPRESION MORE_PRINT_ARGS
Rule 33    MORE_PRINT_ARGS -> empty
Rule 34    TYPE -> INT
Rule 35    TYPE -> FLOAT
Rule 36    EXPRESION -> EXP EXPRESION_OPT
Rule 37    EXPRESION_OPT -> LESS EXP
Rule 38    EXPRESION_OPT -> GREATER EXP
Rule 39    EXPRESION_OPT -> NOT_EQUAL EXP
Rule 40    EXPRESION_OPT -> EQUALS EXP
Rule 41    EXPRESION_OPT -> LESS_EQUAL EXP
Rule 42    EXPRESION_OPT -> GREATER_EQUAL EXP
Rule 43    EXPRESION_OPT -> empty
Rule 44    EXP -> TERMINO EXP_OPT
Rule 45    EXP_OPT -> OP_SUM TERMINO EXP_OPT
Rule 46    EXP_OPT -> OP_SUB TERMINO EXP_OPT
Rule 47    EXP_OPT -> empty
Rule 48    TERMINO -> FACTOR TERMINO_OPT
Rule 49    TERMINO_OPT -> OP_MULT FACTOR TERMINO_OPT
Rule 50    TERMINO_OPT -> OP_DIV FACTOR TERMINO_OPT
Rule 51    TERMINO_OPT -> empty
Rule 52    FACTOR -> LPAREN EXPRESION RPAREN
Rule 53    FACTOR -> SIGN IDENTIFIER
Rule 54    FACTOR -> SIGN CTE
Rule 55    SIGN -> OP_SUM
Rule 56    SIGN -> OP_SUB
Rule 57    SIGN -> empty
Rule 58    F_CALL -> IDENTIFIER LPAREN OPT_EXPRESION RPAREN SEMICOL
Rule 59    OPT_EXPRESION -> EXPRESION MORE_EXPRESION
Rule 60    OPT_EXPRESION -> empty
Rule 61    MORE_EXPRESION -> COMMA EXPRESION MORE_EXPRESION
Rule 62    MORE_EXPRESION -> empty
Rule 63    CTE -> CONST_INT
Rule 64    CTE -> CONST_FLOAT
Rule 65    empty -> <empty>

Terminals, with rules where they appear

COLON                : 7 8 12 14
COMMA                : 9 12 31 32 61
COMMENT              : 
CONST_FLOAT          : 64
CONST_INT            : 63
CONST_STRING         : 29 31
DO                   : 28
ELSE                 : 26
END                  : 1
EQUALS               : 40
FLOAT                : 35
GREATER              : 38
GREATER_EQUAL        : 42
IDENTIFIER           : 1 7 8 9 11 12 14 24 53 58
IF                   : 25
INT                  : 34
LBRACKET             : 16
LESS                 : 37
LESS_EQUAL           : 41
LPAREN               : 11 25 28 29 30 52 58
LSQBRACKET           : 11
MAIN                 : 1
NOT_EQUAL            : 39
OP_ASIGNA            : 24
OP_DIV               : 50
OP_MULT              : 49
OP_SUB               : 46 56
OP_SUM               : 45 55
PRINT                : 29 30
PROGRAM              : 1
RBRACKET             : 16
RPAREN               : 11 25 28 29 30 52 58
RSQBRACKET           : 11
SEMICOL              : 1 7 8 11 24 25 28 29 30 58
STRING               : 
VAR                  : 6
VOID                 : 11
WHILE                : 28
error                : 

Nonterminals, with rules where they appear

ARGS                 : 11
ASSIGN               : 19
Body                 : 1 11 25 26 28
CONDITION            : 20
CTE                  : 54
CYCLE                : 21
ELSE_ARG             : 25
EXP                  : 36 37 38 39 40 41 42
EXPRESION            : 24 25 28 30 32 52 59 61
EXPRESION_OPT        : 36
EXP_OPT              : 44 45 46
FACTOR               : 48 49 50
FUNCS                : 4
FUNCS_OPT            : 1 4
F_CALL               : 22
MORE_ARGS            : 12 14
MORE_EXPRESION       : 59 61
MORE_IDS             : 7 8 9
MORE_PRINT_ARGS      : 29 30 31 32
OPT_EXPRESION        : 58
PRINTP               : 23
SIGN                 : 53 54
STATEMENT            : 17
STATEMENT_OPT        : 16 17
TERMINO              : 44 45 46
TERMINO_OPT          : 48 49 50
TYPE                 : 7 8 12 14
VARS                 : 2
VARS_INIT            : 6 8
VARS_OPT             : 1 11
empty                : 3 5 10 13 15 18 27 33 43 47 51 57 60 62
program              : 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM IDENTIFIER SEMICOL VARS_OPT FUNCS_OPT MAIN Body END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . IDENTIFIER SEMICOL VARS_OPT FUNCS_OPT MAIN Body END

    IDENTIFIER      shift and go to state 3


state 3

    (1) program -> PROGRAM IDENTIFIER . SEMICOL VARS_OPT FUNCS_OPT MAIN Body END

    SEMICOL         shift and go to state 4


state 4

    (1) program -> PROGRAM IDENTIFIER SEMICOL . VARS_OPT FUNCS_OPT MAIN Body END
    (2) VARS_OPT -> . VARS
    (3) VARS_OPT -> . empty
    (6) VARS -> . VAR VARS_INIT
    (65) empty -> .

    VAR             shift and go to state 8
    VOID            reduce using rule 65 (empty -> .)
    MAIN            reduce using rule 65 (empty -> .)

    VARS_OPT                       shift and go to state 5
    VARS                           shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM IDENTIFIER SEMICOL VARS_OPT . FUNCS_OPT MAIN Body END
    (4) FUNCS_OPT -> . FUNCS FUNCS_OPT
    (5) FUNCS_OPT -> . empty
    (11) FUNCS -> . VOID IDENTIFIER LPAREN ARGS RPAREN LSQBRACKET VARS_OPT Body RSQBRACKET SEMICOL
    (65) empty -> .

    VOID            shift and go to state 12
    MAIN            reduce using rule 65 (empty -> .)

    FUNCS_OPT                      shift and go to state 9
    FUNCS                          shift and go to state 10
    empty                          shift and go to state 11

state 6

    (2) VARS_OPT -> VARS .

    VOID            reduce using rule 2 (VARS_OPT -> VARS .)
    MAIN            reduce using rule 2 (VARS_OPT -> VARS .)
    LBRACKET        reduce using rule 2 (VARS_OPT -> VARS .)


state 7

    (3) VARS_OPT -> empty .

    VOID            reduce using rule 3 (VARS_OPT -> empty .)
    MAIN            reduce using rule 3 (VARS_OPT -> empty .)
    LBRACKET        reduce using rule 3 (VARS_OPT -> empty .)


state 8

    (6) VARS -> VAR . VARS_INIT
    (7) VARS_INIT -> . IDENTIFIER MORE_IDS COLON TYPE SEMICOL
    (8) VARS_INIT -> . IDENTIFIER MORE_IDS COLON TYPE SEMICOL VARS_INIT

    IDENTIFIER      shift and go to state 14

    VARS_INIT                      shift and go to state 13

state 9

    (1) program -> PROGRAM IDENTIFIER SEMICOL VARS_OPT FUNCS_OPT . MAIN Body END

    MAIN            shift and go to state 15


state 10

    (4) FUNCS_OPT -> FUNCS . FUNCS_OPT
    (4) FUNCS_OPT -> . FUNCS FUNCS_OPT
    (5) FUNCS_OPT -> . empty
    (11) FUNCS -> . VOID IDENTIFIER LPAREN ARGS RPAREN LSQBRACKET VARS_OPT Body RSQBRACKET SEMICOL
    (65) empty -> .

    VOID            shift and go to state 12
    MAIN            reduce using rule 65 (empty -> .)

    FUNCS                          shift and go to state 10
    FUNCS_OPT                      shift and go to state 16
    empty                          shift and go to state 11

state 11

    (5) FUNCS_OPT -> empty .

    MAIN            reduce using rule 5 (FUNCS_OPT -> empty .)


state 12

    (11) FUNCS -> VOID . IDENTIFIER LPAREN ARGS RPAREN LSQBRACKET VARS_OPT Body RSQBRACKET SEMICOL

    IDENTIFIER      shift and go to state 17


state 13

    (6) VARS -> VAR VARS_INIT .

    VOID            reduce using rule 6 (VARS -> VAR VARS_INIT .)
    MAIN            reduce using rule 6 (VARS -> VAR VARS_INIT .)
    LBRACKET        reduce using rule 6 (VARS -> VAR VARS_INIT .)


state 14

    (7) VARS_INIT -> IDENTIFIER . MORE_IDS COLON TYPE SEMICOL
    (8) VARS_INIT -> IDENTIFIER . MORE_IDS COLON TYPE SEMICOL VARS_INIT
    (9) MORE_IDS -> . COMMA IDENTIFIER MORE_IDS
    (10) MORE_IDS -> . empty
    (65) empty -> .

    COMMA           shift and go to state 19
    COLON           reduce using rule 65 (empty -> .)

    MORE_IDS                       shift and go to state 18
    empty                          shift and go to state 20

state 15

    (1) program -> PROGRAM IDENTIFIER SEMICOL VARS_OPT FUNCS_OPT MAIN . Body END
    (16) Body -> . LBRACKET STATEMENT_OPT RBRACKET

    LBRACKET        shift and go to state 22

    Body                           shift and go to state 21

state 16

    (4) FUNCS_OPT -> FUNCS FUNCS_OPT .

    MAIN            reduce using rule 4 (FUNCS_OPT -> FUNCS FUNCS_OPT .)


state 17

    (11) FUNCS -> VOID IDENTIFIER . LPAREN ARGS RPAREN LSQBRACKET VARS_OPT Body RSQBRACKET SEMICOL

    LPAREN          shift and go to state 23


state 18

    (7) VARS_INIT -> IDENTIFIER MORE_IDS . COLON TYPE SEMICOL
    (8) VARS_INIT -> IDENTIFIER MORE_IDS . COLON TYPE SEMICOL VARS_INIT

    COLON           shift and go to state 24


state 19

    (9) MORE_IDS -> COMMA . IDENTIFIER MORE_IDS

    IDENTIFIER      shift and go to state 25


state 20

    (10) MORE_IDS -> empty .

    COLON           reduce using rule 10 (MORE_IDS -> empty .)


state 21

    (1) program -> PROGRAM IDENTIFIER SEMICOL VARS_OPT FUNCS_OPT MAIN Body . END

    END             shift and go to state 26


state 22

    (16) Body -> LBRACKET . STATEMENT_OPT RBRACKET
    (17) STATEMENT_OPT -> . STATEMENT STATEMENT_OPT
    (18) STATEMENT_OPT -> . empty
    (19) STATEMENT -> . ASSIGN
    (20) STATEMENT -> . CONDITION
    (21) STATEMENT -> . CYCLE
    (22) STATEMENT -> . F_CALL
    (23) STATEMENT -> . PRINTP
    (65) empty -> .
    (24) ASSIGN -> . IDENTIFIER OP_ASIGNA EXPRESION SEMICOL
    (25) CONDITION -> . IF LPAREN EXPRESION RPAREN Body ELSE_ARG SEMICOL
    (28) CYCLE -> . DO Body WHILE LPAREN EXPRESION RPAREN SEMICOL
    (58) F_CALL -> . IDENTIFIER LPAREN OPT_EXPRESION RPAREN SEMICOL
    (29) PRINTP -> . PRINT LPAREN CONST_STRING MORE_PRINT_ARGS RPAREN SEMICOL
    (30) PRINTP -> . PRINT LPAREN EXPRESION MORE_PRINT_ARGS RPAREN SEMICOL

    RBRACKET        reduce using rule 65 (empty -> .)
    IDENTIFIER      shift and go to state 35
    IF              shift and go to state 36
    DO              shift and go to state 37
    PRINT           shift and go to state 38

    STATEMENT_OPT                  shift and go to state 27
    STATEMENT                      shift and go to state 28
    empty                          shift and go to state 29
    ASSIGN                         shift and go to state 30
    CONDITION                      shift and go to state 31
    CYCLE                          shift and go to state 32
    F_CALL                         shift and go to state 33
    PRINTP                         shift and go to state 34

state 23

    (11) FUNCS -> VOID IDENTIFIER LPAREN . ARGS RPAREN LSQBRACKET VARS_OPT Body RSQBRACKET SEMICOL
    (14) ARGS -> . IDENTIFIER COLON TYPE MORE_ARGS
    (15) ARGS -> . empty
    (65) empty -> .

    IDENTIFIER      shift and go to state 39
    RPAREN          reduce using rule 65 (empty -> .)

    ARGS                           shift and go to state 40
    empty                          shift and go to state 41

state 24

    (7) VARS_INIT -> IDENTIFIER MORE_IDS COLON . TYPE SEMICOL
    (8) VARS_INIT -> IDENTIFIER MORE_IDS COLON . TYPE SEMICOL VARS_INIT
    (34) TYPE -> . INT
    (35) TYPE -> . FLOAT

    INT             shift and go to state 43
    FLOAT           shift and go to state 44

    TYPE                           shift and go to state 42

state 25

    (9) MORE_IDS -> COMMA IDENTIFIER . MORE_IDS
    (9) MORE_IDS -> . COMMA IDENTIFIER MORE_IDS
    (10) MORE_IDS -> . empty
    (65) empty -> .

    COMMA           shift and go to state 19
    COLON           reduce using rule 65 (empty -> .)

    MORE_IDS                       shift and go to state 45
    empty                          shift and go to state 20

state 26

    (1) program -> PROGRAM IDENTIFIER SEMICOL VARS_OPT FUNCS_OPT MAIN Body END .

    $end            reduce using rule 1 (program -> PROGRAM IDENTIFIER SEMICOL VARS_OPT FUNCS_OPT MAIN Body END .)


state 27

    (16) Body -> LBRACKET STATEMENT_OPT . RBRACKET

    RBRACKET        shift and go to state 46


state 28

    (17) STATEMENT_OPT -> STATEMENT . STATEMENT_OPT
    (17) STATEMENT_OPT -> . STATEMENT STATEMENT_OPT
    (18) STATEMENT_OPT -> . empty
    (19) STATEMENT -> . ASSIGN
    (20) STATEMENT -> . CONDITION
    (21) STATEMENT -> . CYCLE
    (22) STATEMENT -> . F_CALL
    (23) STATEMENT -> . PRINTP
    (65) empty -> .
    (24) ASSIGN -> . IDENTIFIER OP_ASIGNA EXPRESION SEMICOL
    (25) CONDITION -> . IF LPAREN EXPRESION RPAREN Body ELSE_ARG SEMICOL
    (28) CYCLE -> . DO Body WHILE LPAREN EXPRESION RPAREN SEMICOL
    (58) F_CALL -> . IDENTIFIER LPAREN OPT_EXPRESION RPAREN SEMICOL
    (29) PRINTP -> . PRINT LPAREN CONST_STRING MORE_PRINT_ARGS RPAREN SEMICOL
    (30) PRINTP -> . PRINT LPAREN EXPRESION MORE_PRINT_ARGS RPAREN SEMICOL

    RBRACKET        reduce using rule 65 (empty -> .)
    IDENTIFIER      shift and go to state 35
    IF              shift and go to state 36
    DO              shift and go to state 37
    PRINT           shift and go to state 38

    STATEMENT                      shift and go to state 28
    STATEMENT_OPT                  shift and go to state 47
    empty                          shift and go to state 29
    ASSIGN                         shift and go to state 30
    CONDITION                      shift and go to state 31
    CYCLE                          shift and go to state 32
    F_CALL                         shift and go to state 33
    PRINTP                         shift and go to state 34

state 29

    (18) STATEMENT_OPT -> empty .

    RBRACKET        reduce using rule 18 (STATEMENT_OPT -> empty .)


state 30

    (19) STATEMENT -> ASSIGN .

    IDENTIFIER      reduce using rule 19 (STATEMENT -> ASSIGN .)
    IF              reduce using rule 19 (STATEMENT -> ASSIGN .)
    DO              reduce using rule 19 (STATEMENT -> ASSIGN .)
    PRINT           reduce using rule 19 (STATEMENT -> ASSIGN .)
    RBRACKET        reduce using rule 19 (STATEMENT -> ASSIGN .)


state 31

    (20) STATEMENT -> CONDITION .

    IDENTIFIER      reduce using rule 20 (STATEMENT -> CONDITION .)
    IF              reduce using rule 20 (STATEMENT -> CONDITION .)
    DO              reduce using rule 20 (STATEMENT -> CONDITION .)
    PRINT           reduce using rule 20 (STATEMENT -> CONDITION .)
    RBRACKET        reduce using rule 20 (STATEMENT -> CONDITION .)


state 32

    (21) STATEMENT -> CYCLE .

    IDENTIFIER      reduce using rule 21 (STATEMENT -> CYCLE .)
    IF              reduce using rule 21 (STATEMENT -> CYCLE .)
    DO              reduce using rule 21 (STATEMENT -> CYCLE .)
    PRINT           reduce using rule 21 (STATEMENT -> CYCLE .)
    RBRACKET        reduce using rule 21 (STATEMENT -> CYCLE .)


state 33

    (22) STATEMENT -> F_CALL .

    IDENTIFIER      reduce using rule 22 (STATEMENT -> F_CALL .)
    IF              reduce using rule 22 (STATEMENT -> F_CALL .)
    DO              reduce using rule 22 (STATEMENT -> F_CALL .)
    PRINT           reduce using rule 22 (STATEMENT -> F_CALL .)
    RBRACKET        reduce using rule 22 (STATEMENT -> F_CALL .)


state 34

    (23) STATEMENT -> PRINTP .

    IDENTIFIER      reduce using rule 23 (STATEMENT -> PRINTP .)
    IF              reduce using rule 23 (STATEMENT -> PRINTP .)
    DO              reduce using rule 23 (STATEMENT -> PRINTP .)
    PRINT           reduce using rule 23 (STATEMENT -> PRINTP .)
    RBRACKET        reduce using rule 23 (STATEMENT -> PRINTP .)


state 35

    (24) ASSIGN -> IDENTIFIER . OP_ASIGNA EXPRESION SEMICOL
    (58) F_CALL -> IDENTIFIER . LPAREN OPT_EXPRESION RPAREN SEMICOL

    OP_ASIGNA       shift and go to state 48
    LPAREN          shift and go to state 49


state 36

    (25) CONDITION -> IF . LPAREN EXPRESION RPAREN Body ELSE_ARG SEMICOL

    LPAREN          shift and go to state 50


state 37

    (28) CYCLE -> DO . Body WHILE LPAREN EXPRESION RPAREN SEMICOL
    (16) Body -> . LBRACKET STATEMENT_OPT RBRACKET

    LBRACKET        shift and go to state 22

    Body                           shift and go to state 51

state 38

    (29) PRINTP -> PRINT . LPAREN CONST_STRING MORE_PRINT_ARGS RPAREN SEMICOL
    (30) PRINTP -> PRINT . LPAREN EXPRESION MORE_PRINT_ARGS RPAREN SEMICOL

    LPAREN          shift and go to state 52


state 39

    (14) ARGS -> IDENTIFIER . COLON TYPE MORE_ARGS

    COLON           shift and go to state 53


state 40

    (11) FUNCS -> VOID IDENTIFIER LPAREN ARGS . RPAREN LSQBRACKET VARS_OPT Body RSQBRACKET SEMICOL

    RPAREN          shift and go to state 54


state 41

    (15) ARGS -> empty .

    RPAREN          reduce using rule 15 (ARGS -> empty .)


state 42

    (7) VARS_INIT -> IDENTIFIER MORE_IDS COLON TYPE . SEMICOL
    (8) VARS_INIT -> IDENTIFIER MORE_IDS COLON TYPE . SEMICOL VARS_INIT

    SEMICOL         shift and go to state 55


state 43

    (34) TYPE -> INT .

    SEMICOL         reduce using rule 34 (TYPE -> INT .)
    COMMA           reduce using rule 34 (TYPE -> INT .)
    RPAREN          reduce using rule 34 (TYPE -> INT .)


state 44

    (35) TYPE -> FLOAT .

    SEMICOL         reduce using rule 35 (TYPE -> FLOAT .)
    COMMA           reduce using rule 35 (TYPE -> FLOAT .)
    RPAREN          reduce using rule 35 (TYPE -> FLOAT .)


state 45

    (9) MORE_IDS -> COMMA IDENTIFIER MORE_IDS .

    COLON           reduce using rule 9 (MORE_IDS -> COMMA IDENTIFIER MORE_IDS .)


state 46

    (16) Body -> LBRACKET STATEMENT_OPT RBRACKET .

    END             reduce using rule 16 (Body -> LBRACKET STATEMENT_OPT RBRACKET .)
    WHILE           reduce using rule 16 (Body -> LBRACKET STATEMENT_OPT RBRACKET .)
    ELSE            reduce using rule 16 (Body -> LBRACKET STATEMENT_OPT RBRACKET .)
    SEMICOL         reduce using rule 16 (Body -> LBRACKET STATEMENT_OPT RBRACKET .)
    RSQBRACKET      reduce using rule 16 (Body -> LBRACKET STATEMENT_OPT RBRACKET .)


state 47

    (17) STATEMENT_OPT -> STATEMENT STATEMENT_OPT .

    RBRACKET        reduce using rule 17 (STATEMENT_OPT -> STATEMENT STATEMENT_OPT .)


state 48

    (24) ASSIGN -> IDENTIFIER OP_ASIGNA . EXPRESION SEMICOL
    (36) EXPRESION -> . EXP EXPRESION_OPT
    (44) EXP -> . TERMINO EXP_OPT
    (48) TERMINO -> . FACTOR TERMINO_OPT
    (52) FACTOR -> . LPAREN EXPRESION RPAREN
    (53) FACTOR -> . SIGN IDENTIFIER
    (54) FACTOR -> . SIGN CTE
    (55) SIGN -> . OP_SUM
    (56) SIGN -> . OP_SUB
    (57) SIGN -> . empty
    (65) empty -> .

    LPAREN          shift and go to state 60
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 63
    IDENTIFIER      reduce using rule 65 (empty -> .)
    CONST_INT       reduce using rule 65 (empty -> .)
    CONST_FLOAT     reduce using rule 65 (empty -> .)

    EXPRESION                      shift and go to state 56
    EXP                            shift and go to state 57
    TERMINO                        shift and go to state 58
    FACTOR                         shift and go to state 59
    SIGN                           shift and go to state 61
    empty                          shift and go to state 64

state 49

    (58) F_CALL -> IDENTIFIER LPAREN . OPT_EXPRESION RPAREN SEMICOL
    (59) OPT_EXPRESION -> . EXPRESION MORE_EXPRESION
    (60) OPT_EXPRESION -> . empty
    (36) EXPRESION -> . EXP EXPRESION_OPT
    (65) empty -> .
    (44) EXP -> . TERMINO EXP_OPT
    (48) TERMINO -> . FACTOR TERMINO_OPT
    (52) FACTOR -> . LPAREN EXPRESION RPAREN
    (53) FACTOR -> . SIGN IDENTIFIER
    (54) FACTOR -> . SIGN CTE
    (55) SIGN -> . OP_SUM
    (56) SIGN -> . OP_SUB
    (57) SIGN -> . empty

    RPAREN          reduce using rule 65 (empty -> .)
    IDENTIFIER      reduce using rule 65 (empty -> .)
    CONST_INT       reduce using rule 65 (empty -> .)
    CONST_FLOAT     reduce using rule 65 (empty -> .)
    LPAREN          shift and go to state 60
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 63

    OPT_EXPRESION                  shift and go to state 65
    EXPRESION                      shift and go to state 66
    empty                          shift and go to state 67
    EXP                            shift and go to state 57
    TERMINO                        shift and go to state 58
    FACTOR                         shift and go to state 59
    SIGN                           shift and go to state 61

state 50

    (25) CONDITION -> IF LPAREN . EXPRESION RPAREN Body ELSE_ARG SEMICOL
    (36) EXPRESION -> . EXP EXPRESION_OPT
    (44) EXP -> . TERMINO EXP_OPT
    (48) TERMINO -> . FACTOR TERMINO_OPT
    (52) FACTOR -> . LPAREN EXPRESION RPAREN
    (53) FACTOR -> . SIGN IDENTIFIER
    (54) FACTOR -> . SIGN CTE
    (55) SIGN -> . OP_SUM
    (56) SIGN -> . OP_SUB
    (57) SIGN -> . empty
    (65) empty -> .

    LPAREN          shift and go to state 60
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 63
    IDENTIFIER      reduce using rule 65 (empty -> .)
    CONST_INT       reduce using rule 65 (empty -> .)
    CONST_FLOAT     reduce using rule 65 (empty -> .)

    EXPRESION                      shift and go to state 68
    EXP                            shift and go to state 57
    TERMINO                        shift and go to state 58
    FACTOR                         shift and go to state 59
    SIGN                           shift and go to state 61
    empty                          shift and go to state 64

state 51

    (28) CYCLE -> DO Body . WHILE LPAREN EXPRESION RPAREN SEMICOL

    WHILE           shift and go to state 69


state 52

    (29) PRINTP -> PRINT LPAREN . CONST_STRING MORE_PRINT_ARGS RPAREN SEMICOL
    (30) PRINTP -> PRINT LPAREN . EXPRESION MORE_PRINT_ARGS RPAREN SEMICOL
    (36) EXPRESION -> . EXP EXPRESION_OPT
    (44) EXP -> . TERMINO EXP_OPT
    (48) TERMINO -> . FACTOR TERMINO_OPT
    (52) FACTOR -> . LPAREN EXPRESION RPAREN
    (53) FACTOR -> . SIGN IDENTIFIER
    (54) FACTOR -> . SIGN CTE
    (55) SIGN -> . OP_SUM
    (56) SIGN -> . OP_SUB
    (57) SIGN -> . empty
    (65) empty -> .

    CONST_STRING    shift and go to state 70
    LPAREN          shift and go to state 60
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 63
    IDENTIFIER      reduce using rule 65 (empty -> .)
    CONST_INT       reduce using rule 65 (empty -> .)
    CONST_FLOAT     reduce using rule 65 (empty -> .)

    EXPRESION                      shift and go to state 71
    EXP                            shift and go to state 57
    TERMINO                        shift and go to state 58
    FACTOR                         shift and go to state 59
    SIGN                           shift and go to state 61
    empty                          shift and go to state 64

state 53

    (14) ARGS -> IDENTIFIER COLON . TYPE MORE_ARGS
    (34) TYPE -> . INT
    (35) TYPE -> . FLOAT

    INT             shift and go to state 43
    FLOAT           shift and go to state 44

    TYPE                           shift and go to state 72

state 54

    (11) FUNCS -> VOID IDENTIFIER LPAREN ARGS RPAREN . LSQBRACKET VARS_OPT Body RSQBRACKET SEMICOL

    LSQBRACKET      shift and go to state 73


state 55

    (7) VARS_INIT -> IDENTIFIER MORE_IDS COLON TYPE SEMICOL .
    (8) VARS_INIT -> IDENTIFIER MORE_IDS COLON TYPE SEMICOL . VARS_INIT
    (7) VARS_INIT -> . IDENTIFIER MORE_IDS COLON TYPE SEMICOL
    (8) VARS_INIT -> . IDENTIFIER MORE_IDS COLON TYPE SEMICOL VARS_INIT

    VOID            reduce using rule 7 (VARS_INIT -> IDENTIFIER MORE_IDS COLON TYPE SEMICOL .)
    MAIN            reduce using rule 7 (VARS_INIT -> IDENTIFIER MORE_IDS COLON TYPE SEMICOL .)
    LBRACKET        reduce using rule 7 (VARS_INIT -> IDENTIFIER MORE_IDS COLON TYPE SEMICOL .)
    IDENTIFIER      shift and go to state 14

    VARS_INIT                      shift and go to state 74

state 56

    (24) ASSIGN -> IDENTIFIER OP_ASIGNA EXPRESION . SEMICOL

    SEMICOL         shift and go to state 75


state 57

    (36) EXPRESION -> EXP . EXPRESION_OPT
    (37) EXPRESION_OPT -> . LESS EXP
    (38) EXPRESION_OPT -> . GREATER EXP
    (39) EXPRESION_OPT -> . NOT_EQUAL EXP
    (40) EXPRESION_OPT -> . EQUALS EXP
    (41) EXPRESION_OPT -> . LESS_EQUAL EXP
    (42) EXPRESION_OPT -> . GREATER_EQUAL EXP
    (43) EXPRESION_OPT -> . empty
    (65) empty -> .

    LESS            shift and go to state 77
    GREATER         shift and go to state 78
    NOT_EQUAL       shift and go to state 79
    EQUALS          shift and go to state 80
    LESS_EQUAL      shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    SEMICOL         reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)

    EXPRESION_OPT                  shift and go to state 76
    empty                          shift and go to state 83

state 58

    (44) EXP -> TERMINO . EXP_OPT
    (45) EXP_OPT -> . OP_SUM TERMINO EXP_OPT
    (46) EXP_OPT -> . OP_SUB TERMINO EXP_OPT
    (47) EXP_OPT -> . empty
    (65) empty -> .

    OP_SUM          shift and go to state 85
    OP_SUB          shift and go to state 86
    LESS            reduce using rule 65 (empty -> .)
    GREATER         reduce using rule 65 (empty -> .)
    NOT_EQUAL       reduce using rule 65 (empty -> .)
    EQUALS          reduce using rule 65 (empty -> .)
    LESS_EQUAL      reduce using rule 65 (empty -> .)
    GREATER_EQUAL   reduce using rule 65 (empty -> .)
    SEMICOL         reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)

    EXP_OPT                        shift and go to state 84
    empty                          shift and go to state 87

state 59

    (48) TERMINO -> FACTOR . TERMINO_OPT
    (49) TERMINO_OPT -> . OP_MULT FACTOR TERMINO_OPT
    (50) TERMINO_OPT -> . OP_DIV FACTOR TERMINO_OPT
    (51) TERMINO_OPT -> . empty
    (65) empty -> .

    OP_MULT         shift and go to state 89
    OP_DIV          shift and go to state 90
    OP_SUM          reduce using rule 65 (empty -> .)
    OP_SUB          reduce using rule 65 (empty -> .)
    LESS            reduce using rule 65 (empty -> .)
    GREATER         reduce using rule 65 (empty -> .)
    NOT_EQUAL       reduce using rule 65 (empty -> .)
    EQUALS          reduce using rule 65 (empty -> .)
    LESS_EQUAL      reduce using rule 65 (empty -> .)
    GREATER_EQUAL   reduce using rule 65 (empty -> .)
    SEMICOL         reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)

    TERMINO_OPT                    shift and go to state 88
    empty                          shift and go to state 91

state 60

    (52) FACTOR -> LPAREN . EXPRESION RPAREN
    (36) EXPRESION -> . EXP EXPRESION_OPT
    (44) EXP -> . TERMINO EXP_OPT
    (48) TERMINO -> . FACTOR TERMINO_OPT
    (52) FACTOR -> . LPAREN EXPRESION RPAREN
    (53) FACTOR -> . SIGN IDENTIFIER
    (54) FACTOR -> . SIGN CTE
    (55) SIGN -> . OP_SUM
    (56) SIGN -> . OP_SUB
    (57) SIGN -> . empty
    (65) empty -> .

    LPAREN          shift and go to state 60
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 63
    IDENTIFIER      reduce using rule 65 (empty -> .)
    CONST_INT       reduce using rule 65 (empty -> .)
    CONST_FLOAT     reduce using rule 65 (empty -> .)

    EXPRESION                      shift and go to state 92
    EXP                            shift and go to state 57
    TERMINO                        shift and go to state 58
    FACTOR                         shift and go to state 59
    SIGN                           shift and go to state 61
    empty                          shift and go to state 64

state 61

    (53) FACTOR -> SIGN . IDENTIFIER
    (54) FACTOR -> SIGN . CTE
    (63) CTE -> . CONST_INT
    (64) CTE -> . CONST_FLOAT

    IDENTIFIER      shift and go to state 93
    CONST_INT       shift and go to state 95
    CONST_FLOAT     shift and go to state 96

    CTE                            shift and go to state 94

state 62

    (55) SIGN -> OP_SUM .

    IDENTIFIER      reduce using rule 55 (SIGN -> OP_SUM .)
    CONST_INT       reduce using rule 55 (SIGN -> OP_SUM .)
    CONST_FLOAT     reduce using rule 55 (SIGN -> OP_SUM .)


state 63

    (56) SIGN -> OP_SUB .

    IDENTIFIER      reduce using rule 56 (SIGN -> OP_SUB .)
    CONST_INT       reduce using rule 56 (SIGN -> OP_SUB .)
    CONST_FLOAT     reduce using rule 56 (SIGN -> OP_SUB .)


state 64

    (57) SIGN -> empty .

    IDENTIFIER      reduce using rule 57 (SIGN -> empty .)
    CONST_INT       reduce using rule 57 (SIGN -> empty .)
    CONST_FLOAT     reduce using rule 57 (SIGN -> empty .)


state 65

    (58) F_CALL -> IDENTIFIER LPAREN OPT_EXPRESION . RPAREN SEMICOL

    RPAREN          shift and go to state 97


state 66

    (59) OPT_EXPRESION -> EXPRESION . MORE_EXPRESION
    (61) MORE_EXPRESION -> . COMMA EXPRESION MORE_EXPRESION
    (62) MORE_EXPRESION -> . empty
    (65) empty -> .

    COMMA           shift and go to state 99
    RPAREN          reduce using rule 65 (empty -> .)

    MORE_EXPRESION                 shift and go to state 98
    empty                          shift and go to state 100

state 67

    (60) OPT_EXPRESION -> empty .
    (57) SIGN -> empty .

    RPAREN          reduce using rule 60 (OPT_EXPRESION -> empty .)
    IDENTIFIER      reduce using rule 57 (SIGN -> empty .)
    CONST_INT       reduce using rule 57 (SIGN -> empty .)
    CONST_FLOAT     reduce using rule 57 (SIGN -> empty .)


state 68

    (25) CONDITION -> IF LPAREN EXPRESION . RPAREN Body ELSE_ARG SEMICOL

    RPAREN          shift and go to state 101


state 69

    (28) CYCLE -> DO Body WHILE . LPAREN EXPRESION RPAREN SEMICOL

    LPAREN          shift and go to state 102


state 70

    (29) PRINTP -> PRINT LPAREN CONST_STRING . MORE_PRINT_ARGS RPAREN SEMICOL
    (31) MORE_PRINT_ARGS -> . COMMA CONST_STRING MORE_PRINT_ARGS
    (32) MORE_PRINT_ARGS -> . COMMA EXPRESION MORE_PRINT_ARGS
    (33) MORE_PRINT_ARGS -> . empty
    (65) empty -> .

    COMMA           shift and go to state 104
    RPAREN          reduce using rule 65 (empty -> .)

    MORE_PRINT_ARGS                shift and go to state 103
    empty                          shift and go to state 105

state 71

    (30) PRINTP -> PRINT LPAREN EXPRESION . MORE_PRINT_ARGS RPAREN SEMICOL
    (31) MORE_PRINT_ARGS -> . COMMA CONST_STRING MORE_PRINT_ARGS
    (32) MORE_PRINT_ARGS -> . COMMA EXPRESION MORE_PRINT_ARGS
    (33) MORE_PRINT_ARGS -> . empty
    (65) empty -> .

    COMMA           shift and go to state 104
    RPAREN          reduce using rule 65 (empty -> .)

    MORE_PRINT_ARGS                shift and go to state 106
    empty                          shift and go to state 105

state 72

    (14) ARGS -> IDENTIFIER COLON TYPE . MORE_ARGS
    (12) MORE_ARGS -> . COMMA IDENTIFIER COLON TYPE MORE_ARGS
    (13) MORE_ARGS -> . empty
    (65) empty -> .

    COMMA           shift and go to state 108
    RPAREN          reduce using rule 65 (empty -> .)

    MORE_ARGS                      shift and go to state 107
    empty                          shift and go to state 109

state 73

    (11) FUNCS -> VOID IDENTIFIER LPAREN ARGS RPAREN LSQBRACKET . VARS_OPT Body RSQBRACKET SEMICOL
    (2) VARS_OPT -> . VARS
    (3) VARS_OPT -> . empty
    (6) VARS -> . VAR VARS_INIT
    (65) empty -> .

    VAR             shift and go to state 8
    LBRACKET        reduce using rule 65 (empty -> .)

    VARS_OPT                       shift and go to state 110
    VARS                           shift and go to state 6
    empty                          shift and go to state 7

state 74

    (8) VARS_INIT -> IDENTIFIER MORE_IDS COLON TYPE SEMICOL VARS_INIT .

    VOID            reduce using rule 8 (VARS_INIT -> IDENTIFIER MORE_IDS COLON TYPE SEMICOL VARS_INIT .)
    MAIN            reduce using rule 8 (VARS_INIT -> IDENTIFIER MORE_IDS COLON TYPE SEMICOL VARS_INIT .)
    LBRACKET        reduce using rule 8 (VARS_INIT -> IDENTIFIER MORE_IDS COLON TYPE SEMICOL VARS_INIT .)


state 75

    (24) ASSIGN -> IDENTIFIER OP_ASIGNA EXPRESION SEMICOL .

    IDENTIFIER      reduce using rule 24 (ASSIGN -> IDENTIFIER OP_ASIGNA EXPRESION SEMICOL .)
    IF              reduce using rule 24 (ASSIGN -> IDENTIFIER OP_ASIGNA EXPRESION SEMICOL .)
    DO              reduce using rule 24 (ASSIGN -> IDENTIFIER OP_ASIGNA EXPRESION SEMICOL .)
    PRINT           reduce using rule 24 (ASSIGN -> IDENTIFIER OP_ASIGNA EXPRESION SEMICOL .)
    RBRACKET        reduce using rule 24 (ASSIGN -> IDENTIFIER OP_ASIGNA EXPRESION SEMICOL .)


state 76

    (36) EXPRESION -> EXP EXPRESION_OPT .

    SEMICOL         reduce using rule 36 (EXPRESION -> EXP EXPRESION_OPT .)
    COMMA           reduce using rule 36 (EXPRESION -> EXP EXPRESION_OPT .)
    RPAREN          reduce using rule 36 (EXPRESION -> EXP EXPRESION_OPT .)


state 77

    (37) EXPRESION_OPT -> LESS . EXP
    (44) EXP -> . TERMINO EXP_OPT
    (48) TERMINO -> . FACTOR TERMINO_OPT
    (52) FACTOR -> . LPAREN EXPRESION RPAREN
    (53) FACTOR -> . SIGN IDENTIFIER
    (54) FACTOR -> . SIGN CTE
    (55) SIGN -> . OP_SUM
    (56) SIGN -> . OP_SUB
    (57) SIGN -> . empty
    (65) empty -> .

    LPAREN          shift and go to state 60
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 63
    IDENTIFIER      reduce using rule 65 (empty -> .)
    CONST_INT       reduce using rule 65 (empty -> .)
    CONST_FLOAT     reduce using rule 65 (empty -> .)

    EXP                            shift and go to state 111
    TERMINO                        shift and go to state 58
    FACTOR                         shift and go to state 59
    SIGN                           shift and go to state 61
    empty                          shift and go to state 64

state 78

    (38) EXPRESION_OPT -> GREATER . EXP
    (44) EXP -> . TERMINO EXP_OPT
    (48) TERMINO -> . FACTOR TERMINO_OPT
    (52) FACTOR -> . LPAREN EXPRESION RPAREN
    (53) FACTOR -> . SIGN IDENTIFIER
    (54) FACTOR -> . SIGN CTE
    (55) SIGN -> . OP_SUM
    (56) SIGN -> . OP_SUB
    (57) SIGN -> . empty
    (65) empty -> .

    LPAREN          shift and go to state 60
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 63
    IDENTIFIER      reduce using rule 65 (empty -> .)
    CONST_INT       reduce using rule 65 (empty -> .)
    CONST_FLOAT     reduce using rule 65 (empty -> .)

    EXP                            shift and go to state 112
    TERMINO                        shift and go to state 58
    FACTOR                         shift and go to state 59
    SIGN                           shift and go to state 61
    empty                          shift and go to state 64

state 79

    (39) EXPRESION_OPT -> NOT_EQUAL . EXP
    (44) EXP -> . TERMINO EXP_OPT
    (48) TERMINO -> . FACTOR TERMINO_OPT
    (52) FACTOR -> . LPAREN EXPRESION RPAREN
    (53) FACTOR -> . SIGN IDENTIFIER
    (54) FACTOR -> . SIGN CTE
    (55) SIGN -> . OP_SUM
    (56) SIGN -> . OP_SUB
    (57) SIGN -> . empty
    (65) empty -> .

    LPAREN          shift and go to state 60
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 63
    IDENTIFIER      reduce using rule 65 (empty -> .)
    CONST_INT       reduce using rule 65 (empty -> .)
    CONST_FLOAT     reduce using rule 65 (empty -> .)

    EXP                            shift and go to state 113
    TERMINO                        shift and go to state 58
    FACTOR                         shift and go to state 59
    SIGN                           shift and go to state 61
    empty                          shift and go to state 64

state 80

    (40) EXPRESION_OPT -> EQUALS . EXP
    (44) EXP -> . TERMINO EXP_OPT
    (48) TERMINO -> . FACTOR TERMINO_OPT
    (52) FACTOR -> . LPAREN EXPRESION RPAREN
    (53) FACTOR -> . SIGN IDENTIFIER
    (54) FACTOR -> . SIGN CTE
    (55) SIGN -> . OP_SUM
    (56) SIGN -> . OP_SUB
    (57) SIGN -> . empty
    (65) empty -> .

    LPAREN          shift and go to state 60
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 63
    IDENTIFIER      reduce using rule 65 (empty -> .)
    CONST_INT       reduce using rule 65 (empty -> .)
    CONST_FLOAT     reduce using rule 65 (empty -> .)

    EXP                            shift and go to state 114
    TERMINO                        shift and go to state 58
    FACTOR                         shift and go to state 59
    SIGN                           shift and go to state 61
    empty                          shift and go to state 64

state 81

    (41) EXPRESION_OPT -> LESS_EQUAL . EXP
    (44) EXP -> . TERMINO EXP_OPT
    (48) TERMINO -> . FACTOR TERMINO_OPT
    (52) FACTOR -> . LPAREN EXPRESION RPAREN
    (53) FACTOR -> . SIGN IDENTIFIER
    (54) FACTOR -> . SIGN CTE
    (55) SIGN -> . OP_SUM
    (56) SIGN -> . OP_SUB
    (57) SIGN -> . empty
    (65) empty -> .

    LPAREN          shift and go to state 60
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 63
    IDENTIFIER      reduce using rule 65 (empty -> .)
    CONST_INT       reduce using rule 65 (empty -> .)
    CONST_FLOAT     reduce using rule 65 (empty -> .)

    EXP                            shift and go to state 115
    TERMINO                        shift and go to state 58
    FACTOR                         shift and go to state 59
    SIGN                           shift and go to state 61
    empty                          shift and go to state 64

state 82

    (42) EXPRESION_OPT -> GREATER_EQUAL . EXP
    (44) EXP -> . TERMINO EXP_OPT
    (48) TERMINO -> . FACTOR TERMINO_OPT
    (52) FACTOR -> . LPAREN EXPRESION RPAREN
    (53) FACTOR -> . SIGN IDENTIFIER
    (54) FACTOR -> . SIGN CTE
    (55) SIGN -> . OP_SUM
    (56) SIGN -> . OP_SUB
    (57) SIGN -> . empty
    (65) empty -> .

    LPAREN          shift and go to state 60
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 63
    IDENTIFIER      reduce using rule 65 (empty -> .)
    CONST_INT       reduce using rule 65 (empty -> .)
    CONST_FLOAT     reduce using rule 65 (empty -> .)

    EXP                            shift and go to state 116
    TERMINO                        shift and go to state 58
    FACTOR                         shift and go to state 59
    SIGN                           shift and go to state 61
    empty                          shift and go to state 64

state 83

    (43) EXPRESION_OPT -> empty .

    SEMICOL         reduce using rule 43 (EXPRESION_OPT -> empty .)
    COMMA           reduce using rule 43 (EXPRESION_OPT -> empty .)
    RPAREN          reduce using rule 43 (EXPRESION_OPT -> empty .)


state 84

    (44) EXP -> TERMINO EXP_OPT .

    LESS            reduce using rule 44 (EXP -> TERMINO EXP_OPT .)
    GREATER         reduce using rule 44 (EXP -> TERMINO EXP_OPT .)
    NOT_EQUAL       reduce using rule 44 (EXP -> TERMINO EXP_OPT .)
    EQUALS          reduce using rule 44 (EXP -> TERMINO EXP_OPT .)
    LESS_EQUAL      reduce using rule 44 (EXP -> TERMINO EXP_OPT .)
    GREATER_EQUAL   reduce using rule 44 (EXP -> TERMINO EXP_OPT .)
    SEMICOL         reduce using rule 44 (EXP -> TERMINO EXP_OPT .)
    COMMA           reduce using rule 44 (EXP -> TERMINO EXP_OPT .)
    RPAREN          reduce using rule 44 (EXP -> TERMINO EXP_OPT .)


state 85

    (45) EXP_OPT -> OP_SUM . TERMINO EXP_OPT
    (48) TERMINO -> . FACTOR TERMINO_OPT
    (52) FACTOR -> . LPAREN EXPRESION RPAREN
    (53) FACTOR -> . SIGN IDENTIFIER
    (54) FACTOR -> . SIGN CTE
    (55) SIGN -> . OP_SUM
    (56) SIGN -> . OP_SUB
    (57) SIGN -> . empty
    (65) empty -> .

    LPAREN          shift and go to state 60
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 63
    IDENTIFIER      reduce using rule 65 (empty -> .)
    CONST_INT       reduce using rule 65 (empty -> .)
    CONST_FLOAT     reduce using rule 65 (empty -> .)

    TERMINO                        shift and go to state 117
    FACTOR                         shift and go to state 59
    SIGN                           shift and go to state 61
    empty                          shift and go to state 64

state 86

    (46) EXP_OPT -> OP_SUB . TERMINO EXP_OPT
    (48) TERMINO -> . FACTOR TERMINO_OPT
    (52) FACTOR -> . LPAREN EXPRESION RPAREN
    (53) FACTOR -> . SIGN IDENTIFIER
    (54) FACTOR -> . SIGN CTE
    (55) SIGN -> . OP_SUM
    (56) SIGN -> . OP_SUB
    (57) SIGN -> . empty
    (65) empty -> .

    LPAREN          shift and go to state 60
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 63
    IDENTIFIER      reduce using rule 65 (empty -> .)
    CONST_INT       reduce using rule 65 (empty -> .)
    CONST_FLOAT     reduce using rule 65 (empty -> .)

    TERMINO                        shift and go to state 118
    FACTOR                         shift and go to state 59
    SIGN                           shift and go to state 61
    empty                          shift and go to state 64

state 87

    (47) EXP_OPT -> empty .

    LESS            reduce using rule 47 (EXP_OPT -> empty .)
    GREATER         reduce using rule 47 (EXP_OPT -> empty .)
    NOT_EQUAL       reduce using rule 47 (EXP_OPT -> empty .)
    EQUALS          reduce using rule 47 (EXP_OPT -> empty .)
    LESS_EQUAL      reduce using rule 47 (EXP_OPT -> empty .)
    GREATER_EQUAL   reduce using rule 47 (EXP_OPT -> empty .)
    SEMICOL         reduce using rule 47 (EXP_OPT -> empty .)
    COMMA           reduce using rule 47 (EXP_OPT -> empty .)
    RPAREN          reduce using rule 47 (EXP_OPT -> empty .)


state 88

    (48) TERMINO -> FACTOR TERMINO_OPT .

    OP_SUM          reduce using rule 48 (TERMINO -> FACTOR TERMINO_OPT .)
    OP_SUB          reduce using rule 48 (TERMINO -> FACTOR TERMINO_OPT .)
    LESS            reduce using rule 48 (TERMINO -> FACTOR TERMINO_OPT .)
    GREATER         reduce using rule 48 (TERMINO -> FACTOR TERMINO_OPT .)
    NOT_EQUAL       reduce using rule 48 (TERMINO -> FACTOR TERMINO_OPT .)
    EQUALS          reduce using rule 48 (TERMINO -> FACTOR TERMINO_OPT .)
    LESS_EQUAL      reduce using rule 48 (TERMINO -> FACTOR TERMINO_OPT .)
    GREATER_EQUAL   reduce using rule 48 (TERMINO -> FACTOR TERMINO_OPT .)
    SEMICOL         reduce using rule 48 (TERMINO -> FACTOR TERMINO_OPT .)
    COMMA           reduce using rule 48 (TERMINO -> FACTOR TERMINO_OPT .)
    RPAREN          reduce using rule 48 (TERMINO -> FACTOR TERMINO_OPT .)


state 89

    (49) TERMINO_OPT -> OP_MULT . FACTOR TERMINO_OPT
    (52) FACTOR -> . LPAREN EXPRESION RPAREN
    (53) FACTOR -> . SIGN IDENTIFIER
    (54) FACTOR -> . SIGN CTE
    (55) SIGN -> . OP_SUM
    (56) SIGN -> . OP_SUB
    (57) SIGN -> . empty
    (65) empty -> .

    LPAREN          shift and go to state 60
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 63
    IDENTIFIER      reduce using rule 65 (empty -> .)
    CONST_INT       reduce using rule 65 (empty -> .)
    CONST_FLOAT     reduce using rule 65 (empty -> .)

    FACTOR                         shift and go to state 119
    SIGN                           shift and go to state 61
    empty                          shift and go to state 64

state 90

    (50) TERMINO_OPT -> OP_DIV . FACTOR TERMINO_OPT
    (52) FACTOR -> . LPAREN EXPRESION RPAREN
    (53) FACTOR -> . SIGN IDENTIFIER
    (54) FACTOR -> . SIGN CTE
    (55) SIGN -> . OP_SUM
    (56) SIGN -> . OP_SUB
    (57) SIGN -> . empty
    (65) empty -> .

    LPAREN          shift and go to state 60
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 63
    IDENTIFIER      reduce using rule 65 (empty -> .)
    CONST_INT       reduce using rule 65 (empty -> .)
    CONST_FLOAT     reduce using rule 65 (empty -> .)

    FACTOR                         shift and go to state 120
    SIGN                           shift and go to state 61
    empty                          shift and go to state 64

state 91

    (51) TERMINO_OPT -> empty .

    OP_SUM          reduce using rule 51 (TERMINO_OPT -> empty .)
    OP_SUB          reduce using rule 51 (TERMINO_OPT -> empty .)
    LESS            reduce using rule 51 (TERMINO_OPT -> empty .)
    GREATER         reduce using rule 51 (TERMINO_OPT -> empty .)
    NOT_EQUAL       reduce using rule 51 (TERMINO_OPT -> empty .)
    EQUALS          reduce using rule 51 (TERMINO_OPT -> empty .)
    LESS_EQUAL      reduce using rule 51 (TERMINO_OPT -> empty .)
    GREATER_EQUAL   reduce using rule 51 (TERMINO_OPT -> empty .)
    SEMICOL         reduce using rule 51 (TERMINO_OPT -> empty .)
    COMMA           reduce using rule 51 (TERMINO_OPT -> empty .)
    RPAREN          reduce using rule 51 (TERMINO_OPT -> empty .)


state 92

    (52) FACTOR -> LPAREN EXPRESION . RPAREN

    RPAREN          shift and go to state 121


state 93

    (53) FACTOR -> SIGN IDENTIFIER .

    OP_MULT         reduce using rule 53 (FACTOR -> SIGN IDENTIFIER .)
    OP_DIV          reduce using rule 53 (FACTOR -> SIGN IDENTIFIER .)
    OP_SUM          reduce using rule 53 (FACTOR -> SIGN IDENTIFIER .)
    OP_SUB          reduce using rule 53 (FACTOR -> SIGN IDENTIFIER .)
    LESS            reduce using rule 53 (FACTOR -> SIGN IDENTIFIER .)
    GREATER         reduce using rule 53 (FACTOR -> SIGN IDENTIFIER .)
    NOT_EQUAL       reduce using rule 53 (FACTOR -> SIGN IDENTIFIER .)
    EQUALS          reduce using rule 53 (FACTOR -> SIGN IDENTIFIER .)
    LESS_EQUAL      reduce using rule 53 (FACTOR -> SIGN IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 53 (FACTOR -> SIGN IDENTIFIER .)
    SEMICOL         reduce using rule 53 (FACTOR -> SIGN IDENTIFIER .)
    COMMA           reduce using rule 53 (FACTOR -> SIGN IDENTIFIER .)
    RPAREN          reduce using rule 53 (FACTOR -> SIGN IDENTIFIER .)


state 94

    (54) FACTOR -> SIGN CTE .

    OP_MULT         reduce using rule 54 (FACTOR -> SIGN CTE .)
    OP_DIV          reduce using rule 54 (FACTOR -> SIGN CTE .)
    OP_SUM          reduce using rule 54 (FACTOR -> SIGN CTE .)
    OP_SUB          reduce using rule 54 (FACTOR -> SIGN CTE .)
    LESS            reduce using rule 54 (FACTOR -> SIGN CTE .)
    GREATER         reduce using rule 54 (FACTOR -> SIGN CTE .)
    NOT_EQUAL       reduce using rule 54 (FACTOR -> SIGN CTE .)
    EQUALS          reduce using rule 54 (FACTOR -> SIGN CTE .)
    LESS_EQUAL      reduce using rule 54 (FACTOR -> SIGN CTE .)
    GREATER_EQUAL   reduce using rule 54 (FACTOR -> SIGN CTE .)
    SEMICOL         reduce using rule 54 (FACTOR -> SIGN CTE .)
    COMMA           reduce using rule 54 (FACTOR -> SIGN CTE .)
    RPAREN          reduce using rule 54 (FACTOR -> SIGN CTE .)


state 95

    (63) CTE -> CONST_INT .

    OP_MULT         reduce using rule 63 (CTE -> CONST_INT .)
    OP_DIV          reduce using rule 63 (CTE -> CONST_INT .)
    OP_SUM          reduce using rule 63 (CTE -> CONST_INT .)
    OP_SUB          reduce using rule 63 (CTE -> CONST_INT .)
    LESS            reduce using rule 63 (CTE -> CONST_INT .)
    GREATER         reduce using rule 63 (CTE -> CONST_INT .)
    NOT_EQUAL       reduce using rule 63 (CTE -> CONST_INT .)
    EQUALS          reduce using rule 63 (CTE -> CONST_INT .)
    LESS_EQUAL      reduce using rule 63 (CTE -> CONST_INT .)
    GREATER_EQUAL   reduce using rule 63 (CTE -> CONST_INT .)
    SEMICOL         reduce using rule 63 (CTE -> CONST_INT .)
    COMMA           reduce using rule 63 (CTE -> CONST_INT .)
    RPAREN          reduce using rule 63 (CTE -> CONST_INT .)


state 96

    (64) CTE -> CONST_FLOAT .

    OP_MULT         reduce using rule 64 (CTE -> CONST_FLOAT .)
    OP_DIV          reduce using rule 64 (CTE -> CONST_FLOAT .)
    OP_SUM          reduce using rule 64 (CTE -> CONST_FLOAT .)
    OP_SUB          reduce using rule 64 (CTE -> CONST_FLOAT .)
    LESS            reduce using rule 64 (CTE -> CONST_FLOAT .)
    GREATER         reduce using rule 64 (CTE -> CONST_FLOAT .)
    NOT_EQUAL       reduce using rule 64 (CTE -> CONST_FLOAT .)
    EQUALS          reduce using rule 64 (CTE -> CONST_FLOAT .)
    LESS_EQUAL      reduce using rule 64 (CTE -> CONST_FLOAT .)
    GREATER_EQUAL   reduce using rule 64 (CTE -> CONST_FLOAT .)
    SEMICOL         reduce using rule 64 (CTE -> CONST_FLOAT .)
    COMMA           reduce using rule 64 (CTE -> CONST_FLOAT .)
    RPAREN          reduce using rule 64 (CTE -> CONST_FLOAT .)


state 97

    (58) F_CALL -> IDENTIFIER LPAREN OPT_EXPRESION RPAREN . SEMICOL

    SEMICOL         shift and go to state 122


state 98

    (59) OPT_EXPRESION -> EXPRESION MORE_EXPRESION .

    RPAREN          reduce using rule 59 (OPT_EXPRESION -> EXPRESION MORE_EXPRESION .)


state 99

    (61) MORE_EXPRESION -> COMMA . EXPRESION MORE_EXPRESION
    (36) EXPRESION -> . EXP EXPRESION_OPT
    (44) EXP -> . TERMINO EXP_OPT
    (48) TERMINO -> . FACTOR TERMINO_OPT
    (52) FACTOR -> . LPAREN EXPRESION RPAREN
    (53) FACTOR -> . SIGN IDENTIFIER
    (54) FACTOR -> . SIGN CTE
    (55) SIGN -> . OP_SUM
    (56) SIGN -> . OP_SUB
    (57) SIGN -> . empty
    (65) empty -> .

    LPAREN          shift and go to state 60
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 63
    IDENTIFIER      reduce using rule 65 (empty -> .)
    CONST_INT       reduce using rule 65 (empty -> .)
    CONST_FLOAT     reduce using rule 65 (empty -> .)

    EXPRESION                      shift and go to state 123
    EXP                            shift and go to state 57
    TERMINO                        shift and go to state 58
    FACTOR                         shift and go to state 59
    SIGN                           shift and go to state 61
    empty                          shift and go to state 64

state 100

    (62) MORE_EXPRESION -> empty .

    RPAREN          reduce using rule 62 (MORE_EXPRESION -> empty .)


state 101

    (25) CONDITION -> IF LPAREN EXPRESION RPAREN . Body ELSE_ARG SEMICOL
    (16) Body -> . LBRACKET STATEMENT_OPT RBRACKET

    LBRACKET        shift and go to state 22

    Body                           shift and go to state 124

state 102

    (28) CYCLE -> DO Body WHILE LPAREN . EXPRESION RPAREN SEMICOL
    (36) EXPRESION -> . EXP EXPRESION_OPT
    (44) EXP -> . TERMINO EXP_OPT
    (48) TERMINO -> . FACTOR TERMINO_OPT
    (52) FACTOR -> . LPAREN EXPRESION RPAREN
    (53) FACTOR -> . SIGN IDENTIFIER
    (54) FACTOR -> . SIGN CTE
    (55) SIGN -> . OP_SUM
    (56) SIGN -> . OP_SUB
    (57) SIGN -> . empty
    (65) empty -> .

    LPAREN          shift and go to state 60
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 63
    IDENTIFIER      reduce using rule 65 (empty -> .)
    CONST_INT       reduce using rule 65 (empty -> .)
    CONST_FLOAT     reduce using rule 65 (empty -> .)

    EXPRESION                      shift and go to state 125
    EXP                            shift and go to state 57
    TERMINO                        shift and go to state 58
    FACTOR                         shift and go to state 59
    SIGN                           shift and go to state 61
    empty                          shift and go to state 64

state 103

    (29) PRINTP -> PRINT LPAREN CONST_STRING MORE_PRINT_ARGS . RPAREN SEMICOL

    RPAREN          shift and go to state 126


state 104

    (31) MORE_PRINT_ARGS -> COMMA . CONST_STRING MORE_PRINT_ARGS
    (32) MORE_PRINT_ARGS -> COMMA . EXPRESION MORE_PRINT_ARGS
    (36) EXPRESION -> . EXP EXPRESION_OPT
    (44) EXP -> . TERMINO EXP_OPT
    (48) TERMINO -> . FACTOR TERMINO_OPT
    (52) FACTOR -> . LPAREN EXPRESION RPAREN
    (53) FACTOR -> . SIGN IDENTIFIER
    (54) FACTOR -> . SIGN CTE
    (55) SIGN -> . OP_SUM
    (56) SIGN -> . OP_SUB
    (57) SIGN -> . empty
    (65) empty -> .

    CONST_STRING    shift and go to state 127
    LPAREN          shift and go to state 60
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 63
    IDENTIFIER      reduce using rule 65 (empty -> .)
    CONST_INT       reduce using rule 65 (empty -> .)
    CONST_FLOAT     reduce using rule 65 (empty -> .)

    EXPRESION                      shift and go to state 128
    EXP                            shift and go to state 57
    TERMINO                        shift and go to state 58
    FACTOR                         shift and go to state 59
    SIGN                           shift and go to state 61
    empty                          shift and go to state 64

state 105

    (33) MORE_PRINT_ARGS -> empty .

    RPAREN          reduce using rule 33 (MORE_PRINT_ARGS -> empty .)


state 106

    (30) PRINTP -> PRINT LPAREN EXPRESION MORE_PRINT_ARGS . RPAREN SEMICOL

    RPAREN          shift and go to state 129


state 107

    (14) ARGS -> IDENTIFIER COLON TYPE MORE_ARGS .

    RPAREN          reduce using rule 14 (ARGS -> IDENTIFIER COLON TYPE MORE_ARGS .)


state 108

    (12) MORE_ARGS -> COMMA . IDENTIFIER COLON TYPE MORE_ARGS

    IDENTIFIER      shift and go to state 130


state 109

    (13) MORE_ARGS -> empty .

    RPAREN          reduce using rule 13 (MORE_ARGS -> empty .)


state 110

    (11) FUNCS -> VOID IDENTIFIER LPAREN ARGS RPAREN LSQBRACKET VARS_OPT . Body RSQBRACKET SEMICOL
    (16) Body -> . LBRACKET STATEMENT_OPT RBRACKET

    LBRACKET        shift and go to state 22

    Body                           shift and go to state 131

state 111

    (37) EXPRESION_OPT -> LESS EXP .

    SEMICOL         reduce using rule 37 (EXPRESION_OPT -> LESS EXP .)
    COMMA           reduce using rule 37 (EXPRESION_OPT -> LESS EXP .)
    RPAREN          reduce using rule 37 (EXPRESION_OPT -> LESS EXP .)


state 112

    (38) EXPRESION_OPT -> GREATER EXP .

    SEMICOL         reduce using rule 38 (EXPRESION_OPT -> GREATER EXP .)
    COMMA           reduce using rule 38 (EXPRESION_OPT -> GREATER EXP .)
    RPAREN          reduce using rule 38 (EXPRESION_OPT -> GREATER EXP .)


state 113

    (39) EXPRESION_OPT -> NOT_EQUAL EXP .

    SEMICOL         reduce using rule 39 (EXPRESION_OPT -> NOT_EQUAL EXP .)
    COMMA           reduce using rule 39 (EXPRESION_OPT -> NOT_EQUAL EXP .)
    RPAREN          reduce using rule 39 (EXPRESION_OPT -> NOT_EQUAL EXP .)


state 114

    (40) EXPRESION_OPT -> EQUALS EXP .

    SEMICOL         reduce using rule 40 (EXPRESION_OPT -> EQUALS EXP .)
    COMMA           reduce using rule 40 (EXPRESION_OPT -> EQUALS EXP .)
    RPAREN          reduce using rule 40 (EXPRESION_OPT -> EQUALS EXP .)


state 115

    (41) EXPRESION_OPT -> LESS_EQUAL EXP .

    SEMICOL         reduce using rule 41 (EXPRESION_OPT -> LESS_EQUAL EXP .)
    COMMA           reduce using rule 41 (EXPRESION_OPT -> LESS_EQUAL EXP .)
    RPAREN          reduce using rule 41 (EXPRESION_OPT -> LESS_EQUAL EXP .)


state 116

    (42) EXPRESION_OPT -> GREATER_EQUAL EXP .

    SEMICOL         reduce using rule 42 (EXPRESION_OPT -> GREATER_EQUAL EXP .)
    COMMA           reduce using rule 42 (EXPRESION_OPT -> GREATER_EQUAL EXP .)
    RPAREN          reduce using rule 42 (EXPRESION_OPT -> GREATER_EQUAL EXP .)


state 117

    (45) EXP_OPT -> OP_SUM TERMINO . EXP_OPT
    (45) EXP_OPT -> . OP_SUM TERMINO EXP_OPT
    (46) EXP_OPT -> . OP_SUB TERMINO EXP_OPT
    (47) EXP_OPT -> . empty
    (65) empty -> .

    OP_SUM          shift and go to state 85
    OP_SUB          shift and go to state 86
    LESS            reduce using rule 65 (empty -> .)
    GREATER         reduce using rule 65 (empty -> .)
    NOT_EQUAL       reduce using rule 65 (empty -> .)
    EQUALS          reduce using rule 65 (empty -> .)
    LESS_EQUAL      reduce using rule 65 (empty -> .)
    GREATER_EQUAL   reduce using rule 65 (empty -> .)
    SEMICOL         reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)

    EXP_OPT                        shift and go to state 132
    empty                          shift and go to state 87

state 118

    (46) EXP_OPT -> OP_SUB TERMINO . EXP_OPT
    (45) EXP_OPT -> . OP_SUM TERMINO EXP_OPT
    (46) EXP_OPT -> . OP_SUB TERMINO EXP_OPT
    (47) EXP_OPT -> . empty
    (65) empty -> .

    OP_SUM          shift and go to state 85
    OP_SUB          shift and go to state 86
    LESS            reduce using rule 65 (empty -> .)
    GREATER         reduce using rule 65 (empty -> .)
    NOT_EQUAL       reduce using rule 65 (empty -> .)
    EQUALS          reduce using rule 65 (empty -> .)
    LESS_EQUAL      reduce using rule 65 (empty -> .)
    GREATER_EQUAL   reduce using rule 65 (empty -> .)
    SEMICOL         reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)

    EXP_OPT                        shift and go to state 133
    empty                          shift and go to state 87

state 119

    (49) TERMINO_OPT -> OP_MULT FACTOR . TERMINO_OPT
    (49) TERMINO_OPT -> . OP_MULT FACTOR TERMINO_OPT
    (50) TERMINO_OPT -> . OP_DIV FACTOR TERMINO_OPT
    (51) TERMINO_OPT -> . empty
    (65) empty -> .

    OP_MULT         shift and go to state 89
    OP_DIV          shift and go to state 90
    OP_SUM          reduce using rule 65 (empty -> .)
    OP_SUB          reduce using rule 65 (empty -> .)
    LESS            reduce using rule 65 (empty -> .)
    GREATER         reduce using rule 65 (empty -> .)
    NOT_EQUAL       reduce using rule 65 (empty -> .)
    EQUALS          reduce using rule 65 (empty -> .)
    LESS_EQUAL      reduce using rule 65 (empty -> .)
    GREATER_EQUAL   reduce using rule 65 (empty -> .)
    SEMICOL         reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)

    TERMINO_OPT                    shift and go to state 134
    empty                          shift and go to state 91

state 120

    (50) TERMINO_OPT -> OP_DIV FACTOR . TERMINO_OPT
    (49) TERMINO_OPT -> . OP_MULT FACTOR TERMINO_OPT
    (50) TERMINO_OPT -> . OP_DIV FACTOR TERMINO_OPT
    (51) TERMINO_OPT -> . empty
    (65) empty -> .

    OP_MULT         shift and go to state 89
    OP_DIV          shift and go to state 90
    OP_SUM          reduce using rule 65 (empty -> .)
    OP_SUB          reduce using rule 65 (empty -> .)
    LESS            reduce using rule 65 (empty -> .)
    GREATER         reduce using rule 65 (empty -> .)
    NOT_EQUAL       reduce using rule 65 (empty -> .)
    EQUALS          reduce using rule 65 (empty -> .)
    LESS_EQUAL      reduce using rule 65 (empty -> .)
    GREATER_EQUAL   reduce using rule 65 (empty -> .)
    SEMICOL         reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)

    TERMINO_OPT                    shift and go to state 135
    empty                          shift and go to state 91

state 121

    (52) FACTOR -> LPAREN EXPRESION RPAREN .

    OP_MULT         reduce using rule 52 (FACTOR -> LPAREN EXPRESION RPAREN .)
    OP_DIV          reduce using rule 52 (FACTOR -> LPAREN EXPRESION RPAREN .)
    OP_SUM          reduce using rule 52 (FACTOR -> LPAREN EXPRESION RPAREN .)
    OP_SUB          reduce using rule 52 (FACTOR -> LPAREN EXPRESION RPAREN .)
    LESS            reduce using rule 52 (FACTOR -> LPAREN EXPRESION RPAREN .)
    GREATER         reduce using rule 52 (FACTOR -> LPAREN EXPRESION RPAREN .)
    NOT_EQUAL       reduce using rule 52 (FACTOR -> LPAREN EXPRESION RPAREN .)
    EQUALS          reduce using rule 52 (FACTOR -> LPAREN EXPRESION RPAREN .)
    LESS_EQUAL      reduce using rule 52 (FACTOR -> LPAREN EXPRESION RPAREN .)
    GREATER_EQUAL   reduce using rule 52 (FACTOR -> LPAREN EXPRESION RPAREN .)
    SEMICOL         reduce using rule 52 (FACTOR -> LPAREN EXPRESION RPAREN .)
    COMMA           reduce using rule 52 (FACTOR -> LPAREN EXPRESION RPAREN .)
    RPAREN          reduce using rule 52 (FACTOR -> LPAREN EXPRESION RPAREN .)


state 122

    (58) F_CALL -> IDENTIFIER LPAREN OPT_EXPRESION RPAREN SEMICOL .

    IDENTIFIER      reduce using rule 58 (F_CALL -> IDENTIFIER LPAREN OPT_EXPRESION RPAREN SEMICOL .)
    IF              reduce using rule 58 (F_CALL -> IDENTIFIER LPAREN OPT_EXPRESION RPAREN SEMICOL .)
    DO              reduce using rule 58 (F_CALL -> IDENTIFIER LPAREN OPT_EXPRESION RPAREN SEMICOL .)
    PRINT           reduce using rule 58 (F_CALL -> IDENTIFIER LPAREN OPT_EXPRESION RPAREN SEMICOL .)
    RBRACKET        reduce using rule 58 (F_CALL -> IDENTIFIER LPAREN OPT_EXPRESION RPAREN SEMICOL .)


state 123

    (61) MORE_EXPRESION -> COMMA EXPRESION . MORE_EXPRESION
    (61) MORE_EXPRESION -> . COMMA EXPRESION MORE_EXPRESION
    (62) MORE_EXPRESION -> . empty
    (65) empty -> .

    COMMA           shift and go to state 99
    RPAREN          reduce using rule 65 (empty -> .)

    MORE_EXPRESION                 shift and go to state 136
    empty                          shift and go to state 100

state 124

    (25) CONDITION -> IF LPAREN EXPRESION RPAREN Body . ELSE_ARG SEMICOL
    (26) ELSE_ARG -> . ELSE Body
    (27) ELSE_ARG -> . empty
    (65) empty -> .

    ELSE            shift and go to state 138
    SEMICOL         reduce using rule 65 (empty -> .)

    ELSE_ARG                       shift and go to state 137
    empty                          shift and go to state 139

state 125

    (28) CYCLE -> DO Body WHILE LPAREN EXPRESION . RPAREN SEMICOL

    RPAREN          shift and go to state 140


state 126

    (29) PRINTP -> PRINT LPAREN CONST_STRING MORE_PRINT_ARGS RPAREN . SEMICOL

    SEMICOL         shift and go to state 141


state 127

    (31) MORE_PRINT_ARGS -> COMMA CONST_STRING . MORE_PRINT_ARGS
    (31) MORE_PRINT_ARGS -> . COMMA CONST_STRING MORE_PRINT_ARGS
    (32) MORE_PRINT_ARGS -> . COMMA EXPRESION MORE_PRINT_ARGS
    (33) MORE_PRINT_ARGS -> . empty
    (65) empty -> .

    COMMA           shift and go to state 104
    RPAREN          reduce using rule 65 (empty -> .)

    MORE_PRINT_ARGS                shift and go to state 142
    empty                          shift and go to state 105

state 128

    (32) MORE_PRINT_ARGS -> COMMA EXPRESION . MORE_PRINT_ARGS
    (31) MORE_PRINT_ARGS -> . COMMA CONST_STRING MORE_PRINT_ARGS
    (32) MORE_PRINT_ARGS -> . COMMA EXPRESION MORE_PRINT_ARGS
    (33) MORE_PRINT_ARGS -> . empty
    (65) empty -> .

    COMMA           shift and go to state 104
    RPAREN          reduce using rule 65 (empty -> .)

    MORE_PRINT_ARGS                shift and go to state 143
    empty                          shift and go to state 105

state 129

    (30) PRINTP -> PRINT LPAREN EXPRESION MORE_PRINT_ARGS RPAREN . SEMICOL

    SEMICOL         shift and go to state 144


state 130

    (12) MORE_ARGS -> COMMA IDENTIFIER . COLON TYPE MORE_ARGS

    COLON           shift and go to state 145


state 131

    (11) FUNCS -> VOID IDENTIFIER LPAREN ARGS RPAREN LSQBRACKET VARS_OPT Body . RSQBRACKET SEMICOL

    RSQBRACKET      shift and go to state 146


state 132

    (45) EXP_OPT -> OP_SUM TERMINO EXP_OPT .

    LESS            reduce using rule 45 (EXP_OPT -> OP_SUM TERMINO EXP_OPT .)
    GREATER         reduce using rule 45 (EXP_OPT -> OP_SUM TERMINO EXP_OPT .)
    NOT_EQUAL       reduce using rule 45 (EXP_OPT -> OP_SUM TERMINO EXP_OPT .)
    EQUALS          reduce using rule 45 (EXP_OPT -> OP_SUM TERMINO EXP_OPT .)
    LESS_EQUAL      reduce using rule 45 (EXP_OPT -> OP_SUM TERMINO EXP_OPT .)
    GREATER_EQUAL   reduce using rule 45 (EXP_OPT -> OP_SUM TERMINO EXP_OPT .)
    SEMICOL         reduce using rule 45 (EXP_OPT -> OP_SUM TERMINO EXP_OPT .)
    COMMA           reduce using rule 45 (EXP_OPT -> OP_SUM TERMINO EXP_OPT .)
    RPAREN          reduce using rule 45 (EXP_OPT -> OP_SUM TERMINO EXP_OPT .)


state 133

    (46) EXP_OPT -> OP_SUB TERMINO EXP_OPT .

    LESS            reduce using rule 46 (EXP_OPT -> OP_SUB TERMINO EXP_OPT .)
    GREATER         reduce using rule 46 (EXP_OPT -> OP_SUB TERMINO EXP_OPT .)
    NOT_EQUAL       reduce using rule 46 (EXP_OPT -> OP_SUB TERMINO EXP_OPT .)
    EQUALS          reduce using rule 46 (EXP_OPT -> OP_SUB TERMINO EXP_OPT .)
    LESS_EQUAL      reduce using rule 46 (EXP_OPT -> OP_SUB TERMINO EXP_OPT .)
    GREATER_EQUAL   reduce using rule 46 (EXP_OPT -> OP_SUB TERMINO EXP_OPT .)
    SEMICOL         reduce using rule 46 (EXP_OPT -> OP_SUB TERMINO EXP_OPT .)
    COMMA           reduce using rule 46 (EXP_OPT -> OP_SUB TERMINO EXP_OPT .)
    RPAREN          reduce using rule 46 (EXP_OPT -> OP_SUB TERMINO EXP_OPT .)


state 134

    (49) TERMINO_OPT -> OP_MULT FACTOR TERMINO_OPT .

    OP_SUM          reduce using rule 49 (TERMINO_OPT -> OP_MULT FACTOR TERMINO_OPT .)
    OP_SUB          reduce using rule 49 (TERMINO_OPT -> OP_MULT FACTOR TERMINO_OPT .)
    LESS            reduce using rule 49 (TERMINO_OPT -> OP_MULT FACTOR TERMINO_OPT .)
    GREATER         reduce using rule 49 (TERMINO_OPT -> OP_MULT FACTOR TERMINO_OPT .)
    NOT_EQUAL       reduce using rule 49 (TERMINO_OPT -> OP_MULT FACTOR TERMINO_OPT .)
    EQUALS          reduce using rule 49 (TERMINO_OPT -> OP_MULT FACTOR TERMINO_OPT .)
    LESS_EQUAL      reduce using rule 49 (TERMINO_OPT -> OP_MULT FACTOR TERMINO_OPT .)
    GREATER_EQUAL   reduce using rule 49 (TERMINO_OPT -> OP_MULT FACTOR TERMINO_OPT .)
    SEMICOL         reduce using rule 49 (TERMINO_OPT -> OP_MULT FACTOR TERMINO_OPT .)
    COMMA           reduce using rule 49 (TERMINO_OPT -> OP_MULT FACTOR TERMINO_OPT .)
    RPAREN          reduce using rule 49 (TERMINO_OPT -> OP_MULT FACTOR TERMINO_OPT .)


state 135

    (50) TERMINO_OPT -> OP_DIV FACTOR TERMINO_OPT .

    OP_SUM          reduce using rule 50 (TERMINO_OPT -> OP_DIV FACTOR TERMINO_OPT .)
    OP_SUB          reduce using rule 50 (TERMINO_OPT -> OP_DIV FACTOR TERMINO_OPT .)
    LESS            reduce using rule 50 (TERMINO_OPT -> OP_DIV FACTOR TERMINO_OPT .)
    GREATER         reduce using rule 50 (TERMINO_OPT -> OP_DIV FACTOR TERMINO_OPT .)
    NOT_EQUAL       reduce using rule 50 (TERMINO_OPT -> OP_DIV FACTOR TERMINO_OPT .)
    EQUALS          reduce using rule 50 (TERMINO_OPT -> OP_DIV FACTOR TERMINO_OPT .)
    LESS_EQUAL      reduce using rule 50 (TERMINO_OPT -> OP_DIV FACTOR TERMINO_OPT .)
    GREATER_EQUAL   reduce using rule 50 (TERMINO_OPT -> OP_DIV FACTOR TERMINO_OPT .)
    SEMICOL         reduce using rule 50 (TERMINO_OPT -> OP_DIV FACTOR TERMINO_OPT .)
    COMMA           reduce using rule 50 (TERMINO_OPT -> OP_DIV FACTOR TERMINO_OPT .)
    RPAREN          reduce using rule 50 (TERMINO_OPT -> OP_DIV FACTOR TERMINO_OPT .)


state 136

    (61) MORE_EXPRESION -> COMMA EXPRESION MORE_EXPRESION .

    RPAREN          reduce using rule 61 (MORE_EXPRESION -> COMMA EXPRESION MORE_EXPRESION .)


state 137

    (25) CONDITION -> IF LPAREN EXPRESION RPAREN Body ELSE_ARG . SEMICOL

    SEMICOL         shift and go to state 147


state 138

    (26) ELSE_ARG -> ELSE . Body
    (16) Body -> . LBRACKET STATEMENT_OPT RBRACKET

    LBRACKET        shift and go to state 22

    Body                           shift and go to state 148

state 139

    (27) ELSE_ARG -> empty .

    SEMICOL         reduce using rule 27 (ELSE_ARG -> empty .)


state 140

    (28) CYCLE -> DO Body WHILE LPAREN EXPRESION RPAREN . SEMICOL

    SEMICOL         shift and go to state 149


state 141

    (29) PRINTP -> PRINT LPAREN CONST_STRING MORE_PRINT_ARGS RPAREN SEMICOL .

    IDENTIFIER      reduce using rule 29 (PRINTP -> PRINT LPAREN CONST_STRING MORE_PRINT_ARGS RPAREN SEMICOL .)
    IF              reduce using rule 29 (PRINTP -> PRINT LPAREN CONST_STRING MORE_PRINT_ARGS RPAREN SEMICOL .)
    DO              reduce using rule 29 (PRINTP -> PRINT LPAREN CONST_STRING MORE_PRINT_ARGS RPAREN SEMICOL .)
    PRINT           reduce using rule 29 (PRINTP -> PRINT LPAREN CONST_STRING MORE_PRINT_ARGS RPAREN SEMICOL .)
    RBRACKET        reduce using rule 29 (PRINTP -> PRINT LPAREN CONST_STRING MORE_PRINT_ARGS RPAREN SEMICOL .)


state 142

    (31) MORE_PRINT_ARGS -> COMMA CONST_STRING MORE_PRINT_ARGS .

    RPAREN          reduce using rule 31 (MORE_PRINT_ARGS -> COMMA CONST_STRING MORE_PRINT_ARGS .)


state 143

    (32) MORE_PRINT_ARGS -> COMMA EXPRESION MORE_PRINT_ARGS .

    RPAREN          reduce using rule 32 (MORE_PRINT_ARGS -> COMMA EXPRESION MORE_PRINT_ARGS .)


state 144

    (30) PRINTP -> PRINT LPAREN EXPRESION MORE_PRINT_ARGS RPAREN SEMICOL .

    IDENTIFIER      reduce using rule 30 (PRINTP -> PRINT LPAREN EXPRESION MORE_PRINT_ARGS RPAREN SEMICOL .)
    IF              reduce using rule 30 (PRINTP -> PRINT LPAREN EXPRESION MORE_PRINT_ARGS RPAREN SEMICOL .)
    DO              reduce using rule 30 (PRINTP -> PRINT LPAREN EXPRESION MORE_PRINT_ARGS RPAREN SEMICOL .)
    PRINT           reduce using rule 30 (PRINTP -> PRINT LPAREN EXPRESION MORE_PRINT_ARGS RPAREN SEMICOL .)
    RBRACKET        reduce using rule 30 (PRINTP -> PRINT LPAREN EXPRESION MORE_PRINT_ARGS RPAREN SEMICOL .)


state 145

    (12) MORE_ARGS -> COMMA IDENTIFIER COLON . TYPE MORE_ARGS
    (34) TYPE -> . INT
    (35) TYPE -> . FLOAT

    INT             shift and go to state 43
    FLOAT           shift and go to state 44

    TYPE                           shift and go to state 150

state 146

    (11) FUNCS -> VOID IDENTIFIER LPAREN ARGS RPAREN LSQBRACKET VARS_OPT Body RSQBRACKET . SEMICOL

    SEMICOL         shift and go to state 151


state 147

    (25) CONDITION -> IF LPAREN EXPRESION RPAREN Body ELSE_ARG SEMICOL .

    IDENTIFIER      reduce using rule 25 (CONDITION -> IF LPAREN EXPRESION RPAREN Body ELSE_ARG SEMICOL .)
    IF              reduce using rule 25 (CONDITION -> IF LPAREN EXPRESION RPAREN Body ELSE_ARG SEMICOL .)
    DO              reduce using rule 25 (CONDITION -> IF LPAREN EXPRESION RPAREN Body ELSE_ARG SEMICOL .)
    PRINT           reduce using rule 25 (CONDITION -> IF LPAREN EXPRESION RPAREN Body ELSE_ARG SEMICOL .)
    RBRACKET        reduce using rule 25 (CONDITION -> IF LPAREN EXPRESION RPAREN Body ELSE_ARG SEMICOL .)


state 148

    (26) ELSE_ARG -> ELSE Body .

    SEMICOL         reduce using rule 26 (ELSE_ARG -> ELSE Body .)


state 149

    (28) CYCLE -> DO Body WHILE LPAREN EXPRESION RPAREN SEMICOL .

    IDENTIFIER      reduce using rule 28 (CYCLE -> DO Body WHILE LPAREN EXPRESION RPAREN SEMICOL .)
    IF              reduce using rule 28 (CYCLE -> DO Body WHILE LPAREN EXPRESION RPAREN SEMICOL .)
    DO              reduce using rule 28 (CYCLE -> DO Body WHILE LPAREN EXPRESION RPAREN SEMICOL .)
    PRINT           reduce using rule 28 (CYCLE -> DO Body WHILE LPAREN EXPRESION RPAREN SEMICOL .)
    RBRACKET        reduce using rule 28 (CYCLE -> DO Body WHILE LPAREN EXPRESION RPAREN SEMICOL .)


state 150

    (12) MORE_ARGS -> COMMA IDENTIFIER COLON TYPE . MORE_ARGS
    (12) MORE_ARGS -> . COMMA IDENTIFIER COLON TYPE MORE_ARGS
    (13) MORE_ARGS -> . empty
    (65) empty -> .

    COMMA           shift and go to state 108
    RPAREN          reduce using rule 65 (empty -> .)

    MORE_ARGS                      shift and go to state 152
    empty                          shift and go to state 109

state 151

    (11) FUNCS -> VOID IDENTIFIER LPAREN ARGS RPAREN LSQBRACKET VARS_OPT Body RSQBRACKET SEMICOL .

    VOID            reduce using rule 11 (FUNCS -> VOID IDENTIFIER LPAREN ARGS RPAREN LSQBRACKET VARS_OPT Body RSQBRACKET SEMICOL .)
    MAIN            reduce using rule 11 (FUNCS -> VOID IDENTIFIER LPAREN ARGS RPAREN LSQBRACKET VARS_OPT Body RSQBRACKET SEMICOL .)


state 152

    (12) MORE_ARGS -> COMMA IDENTIFIER COLON TYPE MORE_ARGS .

    RPAREN          reduce using rule 12 (MORE_ARGS -> COMMA IDENTIFIER COLON TYPE MORE_ARGS .)

