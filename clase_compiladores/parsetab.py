
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA COMMENT CONST_FLOAT CONST_INT CONST_STRING DO ELSE END EQUALS FLOAT GREATER GREATER_EQUAL IDENTIFIER IF INT LBRACKET LESS LESS_EQUAL LPAREN LSQBRACKET MAIN NOT_EQUAL OP_ASIGNA OP_DIV OP_MULT OP_SUB OP_SUM PRINT PROGRAM RBRACKET RPAREN RSQBRACKET SEMICOL STRING VAR VOID WHILEprogram : PROGRAM IDENTIFIER SEMICOL VARS_OPT FUNCS_OPT MAIN Body ENDVARS_OPT : VARS\n                | emptyFUNCS_OPT : FUNCS FUNCS_OPT\n                 | emptyVARS : VAR VARS_INITVARS_INIT : LISTA_IDS COLON TYPE SEMICOLVARS_INIT : LISTA_IDS COLON TYPE SEMICOL VARS_INITLISTA_IDS : IDENTIFIERLISTA_IDS : LISTA_IDS COMMA IDENTIFIERFUNCS : VOID IDENTIFIER LPAREN ARGS RPAREN LSQBRACKET VARS_OPT Body RSQBRACKET SEMICOLMORE_ARGS : COMMA IDENTIFIER COLON TYPE MORE_ARGS\n                 | emptyARGS : IDENTIFIER COLON TYPE MORE_ARGS\n            | emptyBody : LBRACKET STATEMENT_OPT RBRACKETSTATEMENT_OPT : STATEMENT STATEMENT_OPT\n                     | emptySTATEMENT : ASSIGN\n                    | CONDITION\n                    | CYCLE\n                    | F_CALL\n                    | PRINTPASSIGN : IDENTIFIER OP_ASIGNA EXPRESION SEMICOLCONDITION : IF LPAREN EXPRESION RPAREN CUADRUPLO_IF Body ELSE_ARG SEMICOLCUADRUPLO_IF :ELSE_ARG : ELSE CUADRUPLO_ELSE BodyCUADRUPLO_ELSE : emptyELSE_ARG : emptyCYCLE : DO Body WHILE LPAREN EXPRESION RPAREN SEMICOLPRINTP : PRINT LPAREN CONST_STRING MORE_PRINT_ARGS RPAREN SEMICOL\n            | PRINT LPAREN EXPRESION MORE_PRINT_ARGS RPAREN SEMICOLMORE_PRINT_ARGS : COMMA CONST_STRING MORE_PRINT_ARGS\n                        | COMMA EXPRESION MORE_PRINT_ARGS\n                       | emptyTYPE : INT\n            | FLOATEXPRESION : EXPEXPRESION : EXP LESS EXP\n                 | EXP GREATER EXP\n                 | EXP NOT_EQUAL EXP\n                 | EXP EQUALS EXP\n                 | EXP LESS_EQUAL EXP\n                 | EXP GREATER_EQUAL EXP\n                 EXP : TERMINOEXP : EXP OP_SUM TERMINOEXP : EXP OP_SUB TERMINOTERMINO : FACTORTERMINO : TERMINO OP_MULT FACTORTERMINO : TERMINO OP_DIV FACTORFACTOR : LPAREN EXPRESION RPARENFACTOR : IDENTIFIERFACTOR : SIGN IDENTIFIERFACTOR : SIGN CTESIGN : OP_SUM\n            | OP_SUB\n            | emptyF_CALL : IDENTIFIER LPAREN OPT_EXPRESION RPAREN SEMICOLOPT_EXPRESION : EXPRESION MORE_EXPRESION\n                     | emptyMORE_EXPRESION : COMMA EXPRESION MORE_EXPRESION\n                      | emptyCTE : CTE_INT\n           | CTE_FLOATCTE_INT : CONST_INTCTE_FLOAT : CONST_FLOATempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,28,],[0,-1,]),'IDENTIFIER':([2,8,12,20,22,23,30,32,33,34,35,36,44,47,48,49,51,59,60,62,63,64,67,74,75,76,77,78,79,80,81,82,83,84,94,97,99,103,117,130,133,139,142,],[3,15,18,27,37,41,37,-19,-20,-21,-22,-23,15,55,55,55,55,-55,-56,55,86,-57,-57,-24,55,55,55,55,55,55,55,55,55,55,55,55,55,125,-58,-31,-32,-30,-25,]),'SEMICOL':([3,24,25,26,45,55,56,57,58,61,86,87,88,89,90,91,92,106,107,108,109,110,111,112,113,114,115,116,121,124,128,129,135,136,138,146,],[4,44,-36,-37,-16,-52,74,-38,-45,-48,-53,-54,-63,-64,-65,-66,117,-39,-40,-41,-42,-43,-44,-46,-47,-49,-50,-51,130,133,-67,139,141,142,-29,-27,]),'VAR':([4,73,],[8,8,]),'VOID':([4,5,6,7,10,13,44,54,141,],[-67,12,-2,-3,12,-6,-7,-8,-11,]),'MAIN':([4,5,6,7,9,10,11,13,17,44,54,141,],[-67,-67,-2,-3,16,-67,-5,-6,-4,-7,-8,-11,]),'LBRACKET':([6,7,13,16,39,44,54,73,96,105,119,137,143,144,],[-2,-3,-6,22,22,-7,-8,-67,-26,22,22,-67,22,-28,]),'COLON':([14,15,27,41,125,],[19,-9,-10,52,134,]),'COMMA':([14,15,25,26,27,55,57,58,61,66,70,71,72,86,87,88,89,90,91,106,107,108,109,110,111,112,113,114,115,116,118,122,123,140,],[20,-9,-36,-37,-10,-52,-38,-45,-48,94,99,99,103,-53,-54,-63,-64,-65,-66,-39,-40,-41,-42,-43,-44,-46,-47,-49,-50,-51,94,99,99,103,]),'LPAREN':([18,37,38,40,47,48,49,51,62,69,75,76,77,78,79,80,81,82,83,84,94,97,99,],[23,48,49,51,62,62,62,62,62,97,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'INT':([19,52,134,],[25,25,25,]),'FLOAT':([19,52,134,],[26,26,26,]),'END':([21,45,],[28,-16,]),'RBRACKET':([22,29,30,31,32,33,34,35,36,46,74,117,130,133,139,142,],[-67,45,-67,-18,-19,-20,-21,-22,-23,-17,-24,-58,-31,-32,-30,-25,]),'IF':([22,30,32,33,34,35,36,74,117,130,133,139,142,],[38,38,-19,-20,-21,-22,-23,-24,-58,-31,-32,-30,-25,]),'DO':([22,30,32,33,34,35,36,74,117,130,133,139,142,],[39,39,-19,-20,-21,-22,-23,-24,-58,-31,-32,-30,-25,]),'PRINT':([22,30,32,33,34,35,36,74,117,130,133,139,142,],[40,40,-19,-20,-21,-22,-23,-24,-58,-31,-32,-30,-25,]),'RPAREN':([23,25,26,42,43,48,55,57,58,61,65,66,67,68,70,71,72,85,86,87,88,89,90,91,93,95,98,100,101,102,104,106,107,108,109,110,111,112,113,114,115,116,118,120,122,123,127,131,132,140,145,],[-67,-36,-37,53,-15,-67,-52,-38,-45,-48,92,-67,-60,96,-67,-67,-67,116,-53,-54,-63,-64,-65,-66,-59,-62,121,-35,124,-14,-13,-39,-40,-41,-42,-43,-44,-46,-47,-49,-50,-51,-67,129,-67,-67,-61,-33,-34,-67,-12,]),'OP_ASIGNA':([37,],[47,]),'WHILE':([45,50,],[-16,69,]),'RSQBRACKET':([45,126,],[-16,135,]),'ELSE':([45,128,],[-16,137,]),'OP_SUM':([47,48,49,51,55,57,58,61,62,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,94,97,99,106,107,108,109,110,111,112,113,114,115,116,],[59,59,59,59,-52,81,-45,-48,59,59,59,59,59,59,59,59,59,59,59,-53,-54,-63,-64,-65,-66,59,59,59,81,81,81,81,81,81,-46,-47,-49,-50,-51,]),'OP_SUB':([47,48,49,51,55,57,58,61,62,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,94,97,99,106,107,108,109,110,111,112,113,114,115,116,],[60,60,60,60,-52,82,-45,-48,60,60,60,60,60,60,60,60,60,60,60,-53,-54,-63,-64,-65,-66,60,60,60,82,82,82,82,82,82,-46,-47,-49,-50,-51,]),'CONST_INT':([47,48,49,51,59,60,62,63,64,67,75,76,77,78,79,80,81,82,83,84,94,97,99,],[-67,-67,-67,-67,-55,-56,-67,90,-57,-57,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,]),'CONST_FLOAT':([47,48,49,51,59,60,62,63,64,67,75,76,77,78,79,80,81,82,83,84,94,97,99,],[-67,-67,-67,-67,-55,-56,-67,91,-57,-57,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,]),'CONST_STRING':([51,99,],[70,122,]),'LSQBRACKET':([53,],[73,]),'OP_MULT':([55,58,61,86,87,88,89,90,91,112,113,114,115,116,],[-52,83,-48,-53,-54,-63,-64,-65,-66,83,83,-49,-50,-51,]),'OP_DIV':([55,58,61,86,87,88,89,90,91,112,113,114,115,116,],[-52,84,-48,-53,-54,-63,-64,-65,-66,84,84,-49,-50,-51,]),'LESS':([55,57,58,61,86,87,88,89,90,91,112,113,114,115,116,],[-52,75,-45,-48,-53,-54,-63,-64,-65,-66,-46,-47,-49,-50,-51,]),'GREATER':([55,57,58,61,86,87,88,89,90,91,112,113,114,115,116,],[-52,76,-45,-48,-53,-54,-63,-64,-65,-66,-46,-47,-49,-50,-51,]),'NOT_EQUAL':([55,57,58,61,86,87,88,89,90,91,112,113,114,115,116,],[-52,77,-45,-48,-53,-54,-63,-64,-65,-66,-46,-47,-49,-50,-51,]),'EQUALS':([55,57,58,61,86,87,88,89,90,91,112,113,114,115,116,],[-52,78,-45,-48,-53,-54,-63,-64,-65,-66,-46,-47,-49,-50,-51,]),'LESS_EQUAL':([55,57,58,61,86,87,88,89,90,91,112,113,114,115,116,],[-52,79,-45,-48,-53,-54,-63,-64,-65,-66,-46,-47,-49,-50,-51,]),'GREATER_EQUAL':([55,57,58,61,86,87,88,89,90,91,112,113,114,115,116,],[-52,80,-45,-48,-53,-54,-63,-64,-65,-66,-46,-47,-49,-50,-51,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'VARS_OPT':([4,73,],[5,105,]),'VARS':([4,73,],[6,6,]),'empty':([4,5,10,22,23,30,47,48,49,51,62,66,70,71,72,73,75,76,77,78,79,80,81,82,83,84,94,97,99,118,122,123,128,137,140,],[7,11,11,31,43,31,64,67,64,64,64,95,100,100,104,7,64,64,64,64,64,64,64,64,64,64,64,64,64,95,100,100,138,144,104,]),'FUNCS_OPT':([5,10,],[9,17,]),'FUNCS':([5,10,],[10,10,]),'VARS_INIT':([8,44,],[13,54,]),'LISTA_IDS':([8,44,],[14,14,]),'Body':([16,39,105,119,143,],[21,50,126,128,146,]),'TYPE':([19,52,134,],[24,72,140,]),'STATEMENT_OPT':([22,30,],[29,46,]),'STATEMENT':([22,30,],[30,30,]),'ASSIGN':([22,30,],[32,32,]),'CONDITION':([22,30,],[33,33,]),'CYCLE':([22,30,],[34,34,]),'F_CALL':([22,30,],[35,35,]),'PRINTP':([22,30,],[36,36,]),'ARGS':([23,],[42,]),'EXPRESION':([47,48,49,51,62,94,97,99,],[56,66,68,71,85,118,120,123,]),'EXP':([47,48,49,51,62,75,76,77,78,79,80,94,97,99,],[57,57,57,57,57,106,107,108,109,110,111,57,57,57,]),'TERMINO':([47,48,49,51,62,75,76,77,78,79,80,81,82,94,97,99,],[58,58,58,58,58,58,58,58,58,58,58,112,113,58,58,58,]),'FACTOR':([47,48,49,51,62,75,76,77,78,79,80,81,82,83,84,94,97,99,],[61,61,61,61,61,61,61,61,61,61,61,61,61,114,115,61,61,61,]),'SIGN':([47,48,49,51,62,75,76,77,78,79,80,81,82,83,84,94,97,99,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'OPT_EXPRESION':([48,],[65,]),'CTE':([63,],[87,]),'CTE_INT':([63,],[88,]),'CTE_FLOAT':([63,],[89,]),'MORE_EXPRESION':([66,118,],[93,127,]),'MORE_PRINT_ARGS':([70,71,122,123,],[98,101,131,132,]),'MORE_ARGS':([72,140,],[102,145,]),'CUADRUPLO_IF':([96,],[119,]),'ELSE_ARG':([128,],[136,]),'CUADRUPLO_ELSE':([137,],[143,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER SEMICOL VARS_OPT FUNCS_OPT MAIN Body END','program',8,'p_program','parser_semantica.py',178),
  ('VARS_OPT -> VARS','VARS_OPT',1,'p_VARS_OPT','parser_semantica.py',183),
  ('VARS_OPT -> empty','VARS_OPT',1,'p_VARS_OPT','parser_semantica.py',184),
  ('FUNCS_OPT -> FUNCS FUNCS_OPT','FUNCS_OPT',2,'p_FUNCS_OPT','parser_semantica.py',189),
  ('FUNCS_OPT -> empty','FUNCS_OPT',1,'p_FUNCS_OPT','parser_semantica.py',190),
  ('VARS -> VAR VARS_INIT','VARS',2,'p_VARS','parser_semantica.py',200),
  ('VARS_INIT -> LISTA_IDS COLON TYPE SEMICOL','VARS_INIT',4,'p_VARS_INIT','parser_semantica.py',208),
  ('VARS_INIT -> LISTA_IDS COLON TYPE SEMICOL VARS_INIT','VARS_INIT',5,'p_VARS_INIT_MORE','parser_semantica.py',213),
  ('LISTA_IDS -> IDENTIFIER','LISTA_IDS',1,'p_LISTA_IDS','parser_semantica.py',217),
  ('LISTA_IDS -> LISTA_IDS COMMA IDENTIFIER','LISTA_IDS',3,'p_LISTA_IDS_MORE','parser_semantica.py',227),
  ('FUNCS -> VOID IDENTIFIER LPAREN ARGS RPAREN LSQBRACKET VARS_OPT Body RSQBRACKET SEMICOL','FUNCS',10,'p_FUNCS','parser_semantica.py',239),
  ('MORE_ARGS -> COMMA IDENTIFIER COLON TYPE MORE_ARGS','MORE_ARGS',5,'p_MORE_ARGS','parser_semantica.py',244),
  ('MORE_ARGS -> empty','MORE_ARGS',1,'p_MORE_ARGS','parser_semantica.py',245),
  ('ARGS -> IDENTIFIER COLON TYPE MORE_ARGS','ARGS',4,'p_ARGS','parser_semantica.py',250),
  ('ARGS -> empty','ARGS',1,'p_ARGS','parser_semantica.py',251),
  ('Body -> LBRACKET STATEMENT_OPT RBRACKET','Body',3,'p_Body','parser_semantica.py',256),
  ('STATEMENT_OPT -> STATEMENT STATEMENT_OPT','STATEMENT_OPT',2,'p_STATEMENT_OPT','parser_semantica.py',261),
  ('STATEMENT_OPT -> empty','STATEMENT_OPT',1,'p_STATEMENT_OPT','parser_semantica.py',262),
  ('STATEMENT -> ASSIGN','STATEMENT',1,'p_STATEMENT','parser_semantica.py',272),
  ('STATEMENT -> CONDITION','STATEMENT',1,'p_STATEMENT','parser_semantica.py',273),
  ('STATEMENT -> CYCLE','STATEMENT',1,'p_STATEMENT','parser_semantica.py',274),
  ('STATEMENT -> F_CALL','STATEMENT',1,'p_STATEMENT','parser_semantica.py',275),
  ('STATEMENT -> PRINTP','STATEMENT',1,'p_STATEMENT','parser_semantica.py',276),
  ('ASSIGN -> IDENTIFIER OP_ASIGNA EXPRESION SEMICOL','ASSIGN',4,'p_ASSIGN','parser_semantica.py',281),
  ('CONDITION -> IF LPAREN EXPRESION RPAREN CUADRUPLO_IF Body ELSE_ARG SEMICOL','CONDITION',8,'p_CONDITION','parser_semantica.py',302),
  ('CUADRUPLO_IF -> <empty>','CUADRUPLO_IF',0,'p_CUADRUPLO_IF','parser_semantica.py',314),
  ('ELSE_ARG -> ELSE CUADRUPLO_ELSE Body','ELSE_ARG',3,'p_ELSE_ARG','parser_semantica.py',325),
  ('CUADRUPLO_ELSE -> empty','CUADRUPLO_ELSE',1,'p_CUADRUPLO_ELSE','parser_semantica.py',328),
  ('ELSE_ARG -> empty','ELSE_ARG',1,'p_ELSE_ARG_EMPTY','parser_semantica.py',349),
  ('CYCLE -> DO Body WHILE LPAREN EXPRESION RPAREN SEMICOL','CYCLE',7,'p_CYCLE','parser_semantica.py',365),
  ('PRINTP -> PRINT LPAREN CONST_STRING MORE_PRINT_ARGS RPAREN SEMICOL','PRINTP',6,'p_PRINTP','parser_semantica.py',370),
  ('PRINTP -> PRINT LPAREN EXPRESION MORE_PRINT_ARGS RPAREN SEMICOL','PRINTP',6,'p_PRINTP','parser_semantica.py',371),
  ('MORE_PRINT_ARGS -> COMMA CONST_STRING MORE_PRINT_ARGS','MORE_PRINT_ARGS',3,'p_MORE_PRINT_ARGS','parser_semantica.py',376),
  ('MORE_PRINT_ARGS -> COMMA EXPRESION MORE_PRINT_ARGS','MORE_PRINT_ARGS',3,'p_MORE_PRINT_ARGS','parser_semantica.py',377),
  ('MORE_PRINT_ARGS -> empty','MORE_PRINT_ARGS',1,'p_MORE_PRINT_ARGS','parser_semantica.py',378),
  ('TYPE -> INT','TYPE',1,'p_TYPE','parser_semantica.py',384),
  ('TYPE -> FLOAT','TYPE',1,'p_TYPE','parser_semantica.py',385),
  ('EXPRESION -> EXP','EXPRESION',1,'p_EXPRESION','parser_semantica.py',421),
  ('EXPRESION -> EXP LESS EXP','EXPRESION',3,'p_EXPRESION_REL','parser_semantica.py',426),
  ('EXPRESION -> EXP GREATER EXP','EXPRESION',3,'p_EXPRESION_REL','parser_semantica.py',427),
  ('EXPRESION -> EXP NOT_EQUAL EXP','EXPRESION',3,'p_EXPRESION_REL','parser_semantica.py',428),
  ('EXPRESION -> EXP EQUALS EXP','EXPRESION',3,'p_EXPRESION_REL','parser_semantica.py',429),
  ('EXPRESION -> EXP LESS_EQUAL EXP','EXPRESION',3,'p_EXPRESION_REL','parser_semantica.py',430),
  ('EXPRESION -> EXP GREATER_EQUAL EXP','EXPRESION',3,'p_EXPRESION_REL','parser_semantica.py',431),
  ('EXP -> TERMINO','EXP',1,'p_EXP','parser_semantica.py',454),
  ('EXP -> EXP OP_SUM TERMINO','EXP',3,'p_EXP_SUM','parser_semantica.py',458),
  ('EXP -> EXP OP_SUB TERMINO','EXP',3,'p_EXP_SUB','parser_semantica.py',482),
  ('TERMINO -> FACTOR','TERMINO',1,'p_TERMINO','parser_semantica.py',507),
  ('TERMINO -> TERMINO OP_MULT FACTOR','TERMINO',3,'p_TERMINO_MULT','parser_semantica.py',511),
  ('TERMINO -> TERMINO OP_DIV FACTOR','TERMINO',3,'p_TERMINO_DIV','parser_semantica.py',535),
  ('FACTOR -> LPAREN EXPRESION RPAREN','FACTOR',3,'p_FACTOR','parser_semantica.py',562),
  ('FACTOR -> IDENTIFIER','FACTOR',1,'p_FACTOR_ID','parser_semantica.py',567),
  ('FACTOR -> SIGN IDENTIFIER','FACTOR',2,'p_FACTOR_ID_SIGN','parser_semantica.py',580),
  ('FACTOR -> SIGN CTE','FACTOR',2,'p_FACTOR_CTE','parser_semantica.py',603),
  ('SIGN -> OP_SUM','SIGN',1,'p_SIGN','parser_semantica.py',619),
  ('SIGN -> OP_SUB','SIGN',1,'p_SIGN','parser_semantica.py',620),
  ('SIGN -> empty','SIGN',1,'p_SIGN','parser_semantica.py',621),
  ('F_CALL -> IDENTIFIER LPAREN OPT_EXPRESION RPAREN SEMICOL','F_CALL',5,'p_F_CALL','parser_semantica.py',627),
  ('OPT_EXPRESION -> EXPRESION MORE_EXPRESION','OPT_EXPRESION',2,'p_OPT_EXPRESION','parser_semantica.py',632),
  ('OPT_EXPRESION -> empty','OPT_EXPRESION',1,'p_OPT_EXPRESION','parser_semantica.py',633),
  ('MORE_EXPRESION -> COMMA EXPRESION MORE_EXPRESION','MORE_EXPRESION',3,'p_MORE_EXPRESION','parser_semantica.py',639),
  ('MORE_EXPRESION -> empty','MORE_EXPRESION',1,'p_MORE_EXPRESION','parser_semantica.py',640),
  ('CTE -> CTE_INT','CTE',1,'p_CTE','parser_semantica.py',645),
  ('CTE -> CTE_FLOAT','CTE',1,'p_CTE','parser_semantica.py',646),
  ('CTE_INT -> CONST_INT','CTE_INT',1,'p_CTE_INT','parser_semantica.py',650),
  ('CTE_FLOAT -> CONST_FLOAT','CTE_FLOAT',1,'p_CTE_FLOAT','parser_semantica.py',655),
  ('empty -> <empty>','empty',0,'p_empty','parser_semantica.py',660),
]
